/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View;

import com.team4.quanliquanmicay.util.XTheme;
import com.team4.quanliquanmicay.util.XDialog;

import com.team4.quanliquanmicay.DAO.TableForCustomerDAO;
import com.team4.quanliquanmicay.Entity.TableForCustomer;
import com.team4.quanliquanmicay.Impl.TableForCustomerDAOImpl;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.border.LineBorder;
import javax.swing.border.CompoundBorder;
import java.awt.GridLayout;


/**
 *
 * @author Asus
 */
public class ChooseTableUI extends javax.swing.JFrame {

    /**
     * Creates new form ChooseTable
     */
    public ChooseTableUI() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        
        // Xóa các dòng ép buộc kích thước cố định
        // XÓA hoặc COMMENT các dòng dưới đây để dùng đúng layout, size, ... của .form

        // this.setSize(800, 600);
        // this.setPreferredSize(new java.awt.Dimension(800, 600));
        // this.setMaximumSize(new java.awt.Dimension(800, 600));
        // this.setMinimumSize(new java.awt.Dimension(800, 600));
        
        this.setLocationRelativeTo(null);
        
        // Đặt tab 1-12 làm tab mặc định
        jTabbedPane1.setSelectedIndex(0);
        
        // Xóa các dòng ép buộc kích thước button
        // ÉP BUỘC KÍCH THƯỚC KHÁC NHAU CHO HAI NÚT
        // jButton1.setPreferredSize(new java.awt.Dimension(350, 50));
        // jButton1.setMinimumSize(new java.awt.Dimension(350, 50));
        // jButton1.setMaximumSize(new java.awt.Dimension(350, 50));
        
        // jButton2.setPreferredSize(new java.awt.Dimension(200, 50));
        // jButton2.setMinimumSize(new java.awt.Dimension(200, 50));
        // jButton2.setMaximumSize(new java.awt.Dimension(200, 50));
        
        // Thêm dòng này để fill dữ liệu khi mở form
        loadTable();
        
        // Thêm event listener cho các button
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
  
        // Đảm bảo giao diện hiển thị đúng theo thiết kế
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTitle.setBackground(new java.awt.Color(134, 39, 43));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("CHỌN BÀN");

        jPanel5.setBackground(new java.awt.Color(204, 164, 133));

        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("1-12", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("13-24", jPanel3);

        jButton2.setBackground(new java.awt.Color(119, 50, 5));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/Exit.png"))); // NOI18N
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 0));
        jButton1.setText("Chuyển bàn");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Thêm các biến sau vào class ChooseTableUI
    private TableForCustomerDAO tableDAO = new TableForCustomerDAOImpl();
    private JButton selectedButton = null;
    private int selectedTableNumber = -1;
    // Thêm biến để theo dõi double click
    private long lastClickTime = 0;
    private JButton lastClickedButton = null;
    private static final long DOUBLE_CLICK_TIME = 300; // milliseconds
    
    // Hàm fill dữ liệu bàn lên 2 panel
    public void loadTable() {
        List<TableForCustomer> tables = tableDAO.findAll();
        jPanel2.removeAll();
        jPanel3.removeAll();

        // PHẢI set layout cho panel để add button động!
        jPanel2.setLayout(new GridLayout(2, 6, 15, 15));
        jPanel3.setLayout(new GridLayout(2, 6, 15, 15));

        // Tạo map để tra cứu nhanh
        java.util.Map<Integer, TableForCustomer> tableMap = new java.util.HashMap<>();
        for (TableForCustomer t : tables) {
            tableMap.put(t.getTable_number(), t);
        }

        // 1-12: Normal
        for (int i = 1; i <= 12; i++) {
            TableForCustomer table = tableMap.get(i);
            JButton btn = createButton(i, table);
            btn.setMaximumSize(new Dimension(120, 800));
            btn.setPreferredSize(new Dimension(120, 800));
            jPanel2.add(btn);
        }

        // 13-24: VIP
        for (int i = 13; i <= 24; i++) {
            TableForCustomer table = tableMap.get(i);
            JButton btn = createButton(i, table);
            btn.setMaximumSize(new Dimension(120, 100));
            btn.setPreferredSize(new Dimension(120, 100));
            jPanel3.add(btn);
        }

        // Cập nhật giao diện
        jPanel2.revalidate();
        jPanel2.repaint();
        jPanel3.revalidate();
        jPanel3.repaint();
    }

    // Hàm tạo button cho từng bàn
    private JButton createButton(int tableNumber, TableForCustomer table) {
        JButton btnTable = new JButton();
        btnTable.setContentAreaFilled(false);
        btnTable.setOpaque(true);
        btnTable.setText(String.format("Bàn #%d", tableNumber));
        btnTable.setPreferredSize(new Dimension(120, 100)); // <-- Thêm dòng này để set height 100px
        btnTable.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 22));
        btnTable.setOpaque(true);
        btnTable.setContentAreaFilled(true);
        btnTable.setBorderPainted(false);
        btnTable.setFocusPainted(false);

        final int buttonStatus = (table != null) ? table.getStatus() : -1;

        if (table == null) {
            btnTable.setEnabled(false);
            btnTable.setBackground(new Color(120, 144, 156));
        } else {
            // Kiểm tra nếu bàn ngưng hoạt động
            if (buttonStatus == 2) {
                btnTable.setEnabled(false);
                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
                btnTable.setToolTipText("Bàn này tạm ngưng hoạt động");
            } else {
                btnTable.setEnabled(true);
                btnTable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
                btnTable.setBorderPainted(true);
                
                // Set màu ban đầu theo TableManagement
                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
                
                btnTable.setActionCommand(String.valueOf(table.getTable_number()));
                
                // Thêm MouseListener để xử lý click và hover
                btnTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        if (btnTable.isEnabled()) {
                            btnTable.setBackground(getHoverColorByStatus(buttonStatus));
                            btnTable.repaint();
                        }
                    }
                    
                    @Override
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        if (btnTable.isEnabled()) {
                            if (btnTable == selectedButton) {
                                btnTable.setBackground(getSelectedColorByStatus(buttonStatus));
                            } else {
                                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
                            }
                            btnTable.repaint();
                        }
                    }
                    
                    @Override
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        if (btnTable.isEnabled()) {
                            // Thay đổi từ màu đen thành màu tối hơn của chính button đó
                            btnTable.setBackground(getPressedColorByStatus(buttonStatus));
                            btnTable.repaint();
                        }
                    }
                    
                    @Override
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                        if (btnTable.isEnabled()) {
                            long currentTime = System.currentTimeMillis();
                            
                            // Kiểm tra xem có phải double click vào cùng button không
                            if (currentTime - lastClickTime < DOUBLE_CLICK_TIME && 
                                lastClickedButton == btnTable) {
                                // Double click vào cùng button - mở BillUI
                                int num = Integer.parseInt(btnTable.getActionCommand());
                                openHoaDonDialog(num);
                            } else {
                                // Single click hoặc click vào button khác - chỉ chọn bàn
                                int num = Integer.parseInt(btnTable.getActionCommand());
                                selectTable(num, btnTable);
                            }
                            
                            // Cập nhật thông tin click cuối cùng
                            lastClickTime = currentTime;
                            lastClickedButton = btnTable;
                            
                            // Reset màu sau khi click
                            if (btnTable == selectedButton) {
                                btnTable.setBackground(getSelectedColorByStatus(buttonStatus));
                            } else {
                                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
                            }
                            btnTable.repaint();
                        }
                    }
                });
            }
        }
        return btnTable;
    }

    // Cập nhật các hàm màu theo yêu cầu cụ thể
    private Color getBaseColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#CCCCCC"); // Trống - xám nhạt
            case 1: return Color.decode("#D6F5D6"); // Đang hoạt động - xanh nhạt
            case 2: return Color.decode("#FFCCCC"); // Ngưng hoạt động - đỏ nhạt
            default: return Color.GRAY;
        }
    }
    
    private Color brightenColor(Color color, float factor) {
        int r = Math.min(255, (int)(color.getRed() + (255 - color.getRed()) * factor));
        int g = Math.min(255, (int)(color.getGreen() + (255 - color.getGreen()) * factor));
        int b = Math.min(255, (int)(color.getBlue() + (255 - color.getBlue()) * factor));
        return new Color(r, g, b);
    }
    
    private Color darkenColor(Color color, float factor) {
        int r = Math.max(0, (int)(color.getRed() * (1 - factor)));
        int g = Math.max(0, (int)(color.getGreen() * (1 - factor)));
        int b = Math.max(0, (int)(color.getBlue() * (1 - factor)));
        return new Color(r, g, b);
    }
    
    // Hover: màu khi đưa chuột tới
    private Color getHoverColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#999999"); // Trống - xám đậm hơn
            case 1: return Color.decode("#ADEBAD"); // Đang hoạt động - xanh đậm hơn
            case 2: return Color.decode("#990000"); // Ngưng hoạt động - đỏ đậm
            default: return Color.GRAY;
        }
    }
    
    // Chọn: màu khi được nhấp vào
    private Color getSelectedColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#666666"); // Trống - xám đậm nhất
            case 1: return Color.decode("#85E085"); // Đang hoạt động - xanh đậm nhất
            case 2: return Color.decode("#660000"); // Ngưng hoạt động - đỏ đậm pha nâu
            default: return Color.GRAY;
        }
    }
    
    // Nhấn chuột: màu khi bấm giữ
    private Color getPressedColorByStatus(int status) {
        return darkenColor(getBaseColorByStatus(status), 0.30f);
    }

    // Hàm chọn bàn (chỉ thay đổi màu và border, không mở BillUI)
    private void selectTable(int tableNumber, JButton btnTable) {
        // Đổi border và màu button cũ về mặc định
        if (selectedButton != null && selectedButton != btnTable) {
            selectedButton.setBorder(javax.swing.BorderFactory.createLineBorder(Color.WHITE, 2));
            selectedButton.setBorderPainted(true);
            TableForCustomer oldTable = tableDAO.findById(selectedTableNumber);
            if (oldTable != null) {
                selectedButton.setBackground(getBaseColorByStatus(oldTable.getStatus()));
            }
        }

        // Đặt border giống TableManagement: màu xám đậm dày 2px + viền trắng 2px
        btnTable.setBorder(new CompoundBorder(
            new LineBorder(Color.decode("#424242"), 2, true),
            new LineBorder(Color.WHITE, 2)
        ));
        btnTable.setBorderPainted(true);

        // Đổi màu nền button được chọn thành màu đậm nhất theo status
        TableForCustomer table = tableDAO.findById(tableNumber);
        if (table != null) {
            btnTable.setBackground(getSelectedColorByStatus(table.getStatus()));
        }

        selectedButton = btnTable;
        selectedTableNumber = tableNumber;
    }
    
    /**
     * Mở BillUI với thông tin bàn đã chọn
     */
    private void openHoaDonDialog(int tableNumber) {
        try {
            // Tạo BillUI mới
//            BillUI hoaDonDialog = new BillUI();
            BillUI hoaDonDialog = new BillUI();
            
            // Set thông tin bàn vào dialog
            hoaDonDialog.setTableInfo(tableNumber);
            
            // Ẩn ChooseTableUI
            this.setVisible(false);
            
            // Hiển thị BillUI
            hoaDonDialog.setVisible(true);
            
        } catch (Exception e) {
            System.err.println("Lỗi khi mở HoaDonJDialog: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Event handlers cho các button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // Xử lý sự kiện cho button "Chuyển bàn"
        if (selectedTableNumber != -1) {
            // Kiểm tra trạng thái bàn được chọn
            TableForCustomer selectedTable = tableDAO.findById(selectedTableNumber);
            if (selectedTable == null) {
                XDialog.alert("Không tìm thấy thông tin bàn!", "Lỗi");
                return;
            }
            
            // Kiểm tra xem bàn có phải bàn ngưng hoạt động không
            if (selectedTable.getStatus() == 2) {
                XDialog.alert("Bàn này tạm ngưng hoạt động!", "Thông báo");
                return;
            }
            
            // Kiểm tra xem bàn có phải bàn trống không
            if (selectedTable.getStatus() == 0) {
                XDialog.alert("Chỉ có thể chuyển bàn đang hoạt động!", "Thông báo");
                return;
            }
            
            // Chỉ cho phép chuyển bàn đang hoạt động (status = 1)
            if (selectedTable.getStatus() == 1) {
                // Mở UI chuyển bàn
                openTransferTableDialog();
            } else {
                XDialog.alert("Bàn này không thể chuyển!", "Thông báo");
            }
        } else {
            // Hiển thị thông báo chưa chọn bàn
            XDialog.alert("Vui lòng chọn bàn trước khi chuyển!", "Thông báo");
        }
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // Xử lý sự kiện cho button Exit với xác nhận
        if (XDialog.confirm("Bạn có chắc chắn muốn thoát khỏi ứng dụng?", "Xác nhận thoát")) {
            this.dispose();
        }
        // Nếu chọn NO thì không làm gì cả, tiếp tục sử dụng ứng dụng
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseTableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseTableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseTableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseTableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseTableUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlTitle;
    // End of variables declaration//GEN-END:variables

    /**
     * Mở dialog chuyển bàn
     */
    private void openTransferTableDialog() {
        try {
            // Tạo dialog chuyển bàn
            TransferTableUI transferDialog = new TransferTableUI(this, selectedTableNumber);
            transferDialog.setVisible(true);
        } catch (Exception e) {
            System.err.println("Lỗi khi mở dialog chuyển bàn: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
