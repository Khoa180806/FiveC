/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View;

import com.team4.quanliquanmicay.util.XTheme;
import com.team4.quanliquanmicay.util.XDialog;
import com.team4.quanliquanmicay.util.XJdbc;
import com.team4.quanliquanmicay.Entity.Bill;
import com.team4.quanliquanmicay.Entity.BillDetails;
import com.team4.quanliquanmicay.Entity.Customer;
import com.team4.quanliquanmicay.Entity.PaymentHistory;
import com.team4.quanliquanmicay.Entity.PaymentMethod;
import com.team4.quanliquanmicay.Entity.TableForCustomer;
import com.team4.quanliquanmicay.DAO.BillDetailsDAO;
import com.team4.quanliquanmicay.Impl.BillDetailsDAOImpl;
import com.team4.quanliquanmicay.DAO.CustomerDAO;
import com.team4.quanliquanmicay.Impl.CustomerDAOImpl;
import com.team4.quanliquanmicay.DAO.PaymentHistoryDAO;
import com.team4.quanliquanmicay.Impl.PaymentHistoryDAOImpl;
import com.team4.quanliquanmicay.DAO.TableForCustomerDAO;
import com.team4.quanliquanmicay.Impl.TableForCustomerDAOImpl;
import com.team4.quanliquanmicay.DAO.BillDAO;
import com.team4.quanliquanmicay.Impl.BillDAOImpl;
import com.team4.quanliquanmicay.Controller.PaymentController;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import java.util.logging.Logger;
import java.util.logging.Level;
import com.team4.quanliquanmicay.util.XValidation;

/**
 *
 * @author HP
 */
public class PayUI extends javax.swing.JFrame implements PaymentController {
    
    // Logger cho debugging
    private static final Logger LOGGER = Logger.getLogger(PayUI.class.getName());
    
    // DAO objects
    private final BillDetailsDAO billDetailsDAO;
    private final CustomerDAO customerDAO;
    private final PaymentHistoryDAO paymentHistoryDAO;
    private final TableForCustomerDAO tableDAO;
    private final BillDAO billDAO;
    
    // Current data
    private Bill currentBill;
    private Customer currentCustomer;
    private List<BillDetails> billDetails;
    private double totalAmount = 0.0;
    private int customerPoints = 0;
    
    // Table model
    private DefaultTableModel tableModel;
    
    // Table selection
    private JButton selectedButton = null;
    private int selectedTableNumber = -1;
    
    // Cache để lưu bill của từng bàn
    private final java.util.Map<Integer, Bill> tableBillCache = new java.util.HashMap<>();
    
    // Lock cho thread safety
    private final Object cacheLock = new Object();

    /**
     * Creates new form ThanhToanJDialog
     */
    public PayUI() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        this.setLocationRelativeTo(null);
        
        // Khởi tạo DAO
        billDetailsDAO = new BillDetailsDAOImpl();
        customerDAO = new CustomerDAOImpl();
        paymentHistoryDAO = new PaymentHistoryDAOImpl();
        tableDAO = new TableForCustomerDAOImpl();
        billDAO = new BillDAOImpl();
        
        // Setup table model
        setupTableModel();
        
        // Setup event handlers
        setupEventHandlers();
        
        // Load bàn khi mở form
        loadTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnPayment = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbBillDetail = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        txtPhoneNumber = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnPay = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblPoint = new javax.swing.JLabel();
        lblTotalAmout = new javax.swing.JLabel();
        btnCreateMember = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 51, 51));

        jPanel1.setBackground(new java.awt.Color(204, 164, 133));

        jPanel2.setBackground(new java.awt.Color(134, 39, 43));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("THANH TOÁN");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(579, 579, 579)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel3.setBackground(new java.awt.Color(204, 164, 133));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        pnPayment.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnPaymentLayout = new javax.swing.GroupLayout(pnPayment);
        pnPayment.setLayout(pnPaymentLayout);
        pnPaymentLayout.setHorizontalGroup(
            pnPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 685, Short.MAX_VALUE)
        );
        pnPaymentLayout.setVerticalGroup(
            pnPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("1-12", pnPayment);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 685, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("13-24", jPanel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jPanel6.setBackground(new java.awt.Color(204, 164, 133));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tbBillDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã Món", "Tên Món", "Số Lượng", "Đơn Giá", "Giảm Giá", "Thành Tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBillDetail.getTableHeader().setResizingAllowed(false);
        tbBillDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbBillDetail);
        if (tbBillDetail.getColumnModel().getColumnCount() > 0) {
            tbBillDetail.getColumnModel().getColumn(0).setResizable(false);
            tbBillDetail.getColumnModel().getColumn(1).setResizable(false);
            tbBillDetail.getColumnModel().getColumn(2).setMinWidth(40);
            tbBillDetail.getColumnModel().getColumn(2).setMaxWidth(60);
            tbBillDetail.getColumnModel().getColumn(3).setResizable(false);
            tbBillDetail.getColumnModel().getColumn(4).setMinWidth(40);
            tbBillDetail.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel7.setBackground(new java.awt.Color(204, 164, 133));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        txtPhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SỐ ĐIỆN THOẠI KHÁCH HÀNG :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("TỔNG TIỀN :");

        btnPay.setBackground(new java.awt.Color(204, 204, 204));
        btnPay.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPay.setForeground(new java.awt.Color(0, 102, 0));
        btnPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/icon/Price list.png"))); // NOI18N
        btnPay.setText("Thanh Toán");
        btnPay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 51), 3));

        btnExit.setBackground(new java.awt.Color(204, 204, 204));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ĐIỂM :");

        lblPoint.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPoint.setForeground(new java.awt.Color(255, 255, 255));
        lblPoint.setText("0");

        lblTotalAmout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTotalAmout.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalAmout.setText("0");

        btnCreateMember.setBackground(new java.awt.Color(204, 204, 204));
        btnCreateMember.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCreateMember.setForeground(new java.awt.Color(153, 153, 153));
        btnCreateMember.setText("KH Mới");
        btnCreateMember.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalAmout, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(btnPay)
                        .addComponent(jLabel4)
                        .addComponent(lblPoint)
                        .addComponent(lblTotalAmout)
                        .addComponent(btnCreateMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Hiển thị dialog xác nhận trước khi thoát
        if (XDialog.confirm("Bạn có chắc chắn muốn thoát khỏi giao diện thanh toán không?", "Xác nhận thoát")) {  
            this.dispose(); // Chỉ đóng cửa sổ khi người dùng xác nhận
        }
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateMember;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblPoint;
    private javax.swing.JLabel lblTotalAmout;
    private javax.swing.JPanel pnPayment;
    private javax.swing.JTable tbBillDetail;
    private javax.swing.JTextField txtPhoneNumber;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Setup table model cho bảng chi tiết hóa đơn
     */
    private void setupTableModel() {
        String[] columns = {"Mã SP", "Tên SP", "Số lượng", "Đơn giá", "Giảm giá", "Thành tiền"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tbBillDetail.setModel(tableModel);
        
        // Set fixed column widths
        tbBillDetail.getColumnModel().getColumn(0).setPreferredWidth(80);  // Mã SP - smaller
        tbBillDetail.getColumnModel().getColumn(1).setPreferredWidth(200); // Tên SP - larger
        tbBillDetail.getColumnModel().getColumn(2).setPreferredWidth(80);  // Số lượng - smaller
        tbBillDetail.getColumnModel().getColumn(3).setPreferredWidth(100); // Đơn giá - smaller
        tbBillDetail.getColumnModel().getColumn(4).setPreferredWidth(80);  // Giảm giá - smaller
        tbBillDetail.getColumnModel().getColumn(5).setPreferredWidth(100); // Thành tiền - smaller
    }
    
    /**
     * Format tiền tệ
     */
    private String formatCurrency(double amount) {
        return String.format("%,.0f VNĐ", amount);
    }
    
    /**
     * Format giảm giá thành phần trăm
     */
    private String formatDiscount(double discount) {
        if (discount <= 0) return "0%";
        return String.format("%.0f%%", discount * 100);
    }
    
    /**
     * Setup event handlers cho các button
     */
    private void setupEventHandlers() {
        btnPay.addActionListener(evt -> processPayment());
    
        btnCreateMember.addActionListener(evt -> createMember());
        
        // Thêm event cho txtPhoneNumber - tự động tìm kiếm khi Enter
        txtPhoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    searchCustomerByPhone();
                }
            }
            
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                // Tự động cập nhật điểm khi thay đổi số điện thoại
                String phoneNumber = txtPhoneNumber.getText().trim();
                if (!phoneNumber.isEmpty() && currentBill != null && totalAmount > 0) {
                    Customer customer = searchCustomer(phoneNumber);
                    if (customer != null) {
                        int currentPoints = customer.getPoint_level();
                        int newPoints = calculateNewPoints(currentPoints, totalAmount);
                        lblPoint.setText(String.valueOf(newPoints));
                    } else {
                        lblPoint.setText("0");
                    }
                }
            }
        });
        
        // Thêm event cho bảng
        tbBillDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    showBillDetailInfo();
                }
            }
        });
    }
    
    /**
     * Load danh sách bàn vào tab1, tab2
     */
    private void loadTables() {
        try {
            List<TableForCustomer> tables = this.getAllTables();
            
            // Xóa tất cả bàn cũ trong panel
            pnPayment.removeAll();
            jPanel5.removeAll();
            
            // Tạo map để tra cứu nhanh
            java.util.Map<Integer, TableForCustomer> tableMap = new java.util.HashMap<>();
            for (TableForCustomer t : tables) {
                tableMap.put(t.getTable_number(), t);
            }

            // Tab1: Bàn 1-12 (Normal)
            pnPayment.setLayout(new java.awt.GridLayout(2, 6, 15, 15));
            for (int i = 1; i <= 12; i++) {
                TableForCustomer table = tableMap.get(i);
                pnPayment.add(createTableButton(i, table));
            }

            // Tab2: Bàn 13-24 (VIP)
            jPanel5.setLayout(new java.awt.GridLayout(2, 6, 15, 15));
            for (int i = 13; i <= 24; i++) {
                TableForCustomer table = tableMap.get(i);
                jPanel5.add(createTableButton(i, table));
            }
            
            // Cập nhật giao diện
            pnPayment.revalidate();
            pnPayment.repaint();
            jPanel5.revalidate();
            jPanel5.repaint();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi load bàn: " + e.getMessage());
        }
    }
    
    /**
     * Tạo button cho từng bàn
     */
    private JButton createTableButton(int tableNumber, TableForCustomer table) {
        JButton btnTable = new JButton();
        btnTable.setContentAreaFilled(false);
        btnTable.setOpaque(true);
        btnTable.setText(String.format("Bàn #%d", tableNumber));
        btnTable.setPreferredSize(new Dimension(120, 120));
        btnTable.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 22));
        btnTable.setOpaque(true);
        btnTable.setContentAreaFilled(true);
        btnTable.setBorderPainted(false);
        btnTable.setFocusPainted(false);
        btnTable.setRolloverEnabled(false);

        final int buttonStatus = (table != null) ? table.getStatus() : -1;

        if (table == null) {
            btnTable.setEnabled(false);
            btnTable.setBackground(new Color(120, 144, 156));
        } else {
            btnTable.setEnabled(true);
            btnTable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
            btnTable.setBorderPainted(true);
            
            if (tableNumber == selectedTableNumber) {
                // Sử dụng border giống TableManagement: màu xám đậm dày 2px + viền trắng 2px
                btnTable.setBorder(new javax.swing.border.CompoundBorder(
                    new javax.swing.border.LineBorder(Color.decode("#424242"), 2, true),
                    new javax.swing.border.LineBorder(Color.WHITE, 2)
                ));
                btnTable.setBorderPainted(true);
                selectedButton = btnTable;
                // Button đã chọn sẽ có màu đậm nhất theo status
                btnTable.setBackground(getSelectedColorByStatus(buttonStatus));
            } else {
                // Sử dụng màu cơ bản theo status
                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
            }
            
            btnTable.setActionCommand(String.valueOf(tableNumber));
            btnTable.addActionListener((ActionEvent e) -> {
                int num = Integer.parseInt(e.getActionCommand());
                selectTable(num, btnTable);
            });

            // Lưu màu gốc của button
            final Color originalButtonColor = getBaseColorByStatus(buttonStatus);
            final Color selectedButtonColor = getSelectedColorByStatus(buttonStatus);

            btnTable.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        btnTable.setBackground(getHoverColorByStatus(buttonStatus));
                        btnTable.repaint();
                    }
                }
                
                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        btnTable.setBackground(originalButtonColor);
                        btnTable.repaint();
                    }
                }
                
                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    if (btnTable.isEnabled()) {
                        btnTable.setBackground(getPressedColorByStatus(buttonStatus));
                        btnTable.repaint();
                    }
                }
                
                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    if (btnTable.isEnabled()) {
                        if (btnTable == selectedButton) {
                            btnTable.setBackground(selectedButtonColor);
                        } else {
                            btnTable.setBackground(originalButtonColor);
                        }
                        btnTable.repaint();
                    }
                }
            });
        }
        return btnTable;
    }
    
    /**
     * Chọn bàn và load thông tin hóa đơn
     */
    private void selectTable(int tableNumber, JButton btnTable) {
        // Đổi border và màu button cũ về mặc định
        if (selectedButton != null && selectedButton != btnTable) {
            selectedButton.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
            selectedButton.setBorderPainted(true);
            TableForCustomer oldTable = tableDAO.findById(selectedTableNumber);
            if (oldTable != null) {
                switch (oldTable.getStatus()) {
                    case 0: selectedButton.setBackground(Color.decode("#bdbdbd")); break; // Xám nhạt
                    case 1: selectedButton.setBackground(Color.decode("#27ae60")); break; // Xanh lá
                    case 2: selectedButton.setBackground(Color.decode("#f5f5f5")); break; // Xám trắng
                    default: selectedButton.setBackground(new Color(55, 71, 79));
                }
            }
        }

        // Đặt border màu #00fe92 dày 4px cho button mới
        btnTable.setBorder(new javax.swing.border.CompoundBorder(
            new javax.swing.border.LineBorder(Color.decode("#00fe92"), 4, true),
            new javax.swing.border.LineBorder(Color.LIGHT_GRAY, 2)
        ));
        btnTable.setBorderPainted(true);

        // Đổi màu nền button được chọn thành màu đậm hơn theo status
        TableForCustomer table = tableDAO.findById(tableNumber);
        if (table != null) {
            btnTable.setBackground(getSelectedColorByStatus(table.getStatus()));
        }

        selectedButton = btnTable;
        selectedTableNumber = tableNumber;

        // Load thông tin hóa đơn của bàn này
        loadBillForTable(tableNumber);
    }
    
    /**
     * Load bill trực tiếp từ HoaDonJDialog
     */
    public void loadBillDirectly(Bill bill) {
        if (bill == null) {
            XDialog.alert("Không có thông tin hóa đơn!");
            return;
        }
        
        currentBill = bill;
        selectedTableNumber = bill.getTable_number();
        
        // Lưu bill vào cache
        tableBillCache.put(bill.getTable_number(), bill);
        
        // Load chi tiết hóa đơn
        loadBillDetails(currentBill.getBill_id());
        
        // Không load thông tin khách hàng tự động - để user tự nhập tìm kiếm
        // Reset thông tin khách hàng
        currentCustomer = null;
        customerPoints = 0;
        lblPoint.setText("0");
        
        // Cập nhật giao diện
        updateDisplay();
        
        // Đảm bảo load bàn trước khi tô màu
        loadTables();
        
        // Tô màu bàn được chọn
        highlightSelectedTableDirectly();
    }
    
    /**
     * Cập nhật cache khi có bill mới
     */
    public void updateBillCache(int tableNumber, Bill bill) {
        synchronized (cacheLock) {
            if (bill != null) {
                tableBillCache.put(tableNumber, bill);
            }
        }
    }
    
    /**
     * Xóa bill khỏi cache khi thanh toán xong
     */
    public void removeBillFromCache(int tableNumber) {
        synchronized (cacheLock) {
            tableBillCache.remove(tableNumber);
        }
    }
    
    /**
     * Tô màu bàn được chọn (không load lại bàn)
     */
    private void highlightSelectedTableDirectly() {
        // Tìm và tô màu bàn được chọn
        for (int i = 0; i < pnPayment.getComponentCount(); i++) {
            if (pnPayment.getComponent(i) instanceof JButton) {
                JButton btn = (JButton) pnPayment.getComponent(i);
                if (btn.getActionCommand() != null && 
                    btn.getActionCommand().equals(String.valueOf(selectedTableNumber))) {
                    btn.setBorder(new javax.swing.border.CompoundBorder(
                        new javax.swing.border.LineBorder(Color.decode("#00fe92"), 4, true),
                        new javax.swing.border.LineBorder(Color.LIGHT_GRAY, 2)
                    ));
                    btn.setBackground(getSelectedColorByStatus(1)); // Giả sử status = 1 (đang phục vụ)
                    selectedButton = btn;
                    break;
                }
            }
        }
        
        // Kiểm tra tab 2
        for (int i = 0; i < jPanel5.getComponentCount(); i++) {
            if (jPanel5.getComponent(i) instanceof JButton) {
                JButton btn = (JButton) jPanel5.getComponent(i);
                if (btn.getActionCommand() != null && 
                    btn.getActionCommand().equals(String.valueOf(selectedTableNumber))) {
                    btn.setBorder(new javax.swing.border.CompoundBorder(
                        new javax.swing.border.LineBorder(Color.decode("#00fe92"), 4, true),
                        new javax.swing.border.LineBorder(Color.LIGHT_GRAY, 2)
                    ));
                    btn.setBackground(getSelectedColorByStatus(1));
                    selectedButton = btn;
                    break;
                }
            }
        }
        
        // Chuyển đến tab chứa bàn được chọn
        if (selectedTableNumber <= 12) {
            jTabbedPane1.setSelectedIndex(0); // Tab 1 (Bàn 1-12)
        } else {
            jTabbedPane1.setSelectedIndex(1); // Tab 2 (Bàn 13-24)
        }
    }
    
    /**
     * Tô màu bàn được chọn
     */
    private void highlightSelectedTable() {
        // Đảm bảo load bàn trước khi tô màu
        loadTables();
        
        // Tìm và tô màu bàn được chọn
        for (int i = 0; i < pnPayment.getComponentCount(); i++) {
            if (pnPayment.getComponent(i) instanceof JButton) {
                JButton btn = (JButton) pnPayment.getComponent(i);
                if (btn.getActionCommand() != null && 
                    btn.getActionCommand().equals(String.valueOf(selectedTableNumber))) {
                    btn.setBorder(new javax.swing.border.CompoundBorder(
                        new javax.swing.border.LineBorder(Color.decode("#00fe92"), 4, true),
                        new javax.swing.border.LineBorder(Color.LIGHT_GRAY, 2)
                    ));
                    btn.setBackground(getSelectedColorByStatus(1)); // Giả sử status = 1 (đang phục vụ)
                    selectedButton = btn;
                    break;
                }
            }
        }
        
        // Kiểm tra tab 2
        for (int i = 0; i < jPanel5.getComponentCount(); i++) {
            if (jPanel5.getComponent(i) instanceof JButton) {
                JButton btn = (JButton) jPanel5.getComponent(i);
                if (btn.getActionCommand() != null && 
                    btn.getActionCommand().equals(String.valueOf(selectedTableNumber))) {
                    btn.setBorder(new javax.swing.border.CompoundBorder(
                        new javax.swing.border.LineBorder(Color.decode("#00fe92"), 4, true),
                        new javax.swing.border.LineBorder(Color.LIGHT_GRAY, 2)
                    ));
                    btn.setBackground(getSelectedColorByStatus(1));
                    selectedButton = btn;
                    break;
                }
            }
        }
        
        // Chuyển đến tab chứa bàn được chọn
        if (selectedTableNumber <= 12) {
            jTabbedPane1.setSelectedIndex(0); // Tab 1 (Bàn 1-12)
        } else {
            jTabbedPane1.setSelectedIndex(1); // Tab 2 (Bàn 13-24)
        }
    }
    
    /**
     * Load thông tin hóa đơn cho bàn được chọn
     */
    public void loadBillForTable(int tableNumber) {
        try {
            // Debug: Kiểm tra tất cả bill của bàn này
            List<Bill> allBills = ((BillDAOImpl) billDAO).findAllByTableNumber(tableNumber);
            LOGGER.log(Level.INFO, "Debug: Tìm thấy " + allBills.size() + " bill cho bàn " + tableNumber);
            for (Bill bill : allBills) {
                LOGGER.log(Level.INFO, "  Bill ID: " + bill.getBill_id() + ", Status: " + bill.getStatus());
            }
            
            // Sử dụng controller để lấy bill
            Bill bill = this.getBillByTableNumber(tableNumber);
            
            if (bill != null) {
                // Có hóa đơn đang hoạt động
                currentBill = bill;
                
                // Load chi tiết hóa đơn
                loadBillDetails(currentBill.getBill_id());
                
                // Không load thông tin khách hàng tự động - để user tự nhập tìm kiếm
                // Reset thông tin khách hàng
                currentCustomer = null;
                customerPoints = 0;
                
                // Hiển thị điểm tương ứng với bill của bàn này
                if (totalAmount > 0) {
                    int potentialPoints = (int)(totalAmount / 1000); // 1 điểm cho mỗi 1000đ
                    lblPoint.setText(String.valueOf(potentialPoints));
                } else {
                    lblPoint.setText("0");
                }
                
                // Cập nhật giao diện
                updateDisplay();
                
            } else {
                // Không có hóa đơn - chỉ clear display, không hiện thông báo
                clearDisplay();
            }
            
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Lỗi khi load hóa đơn cho bàn " + tableNumber, e);
            XDialog.alert("Lỗi khi load hóa đơn: " + e.getMessage());
        }
    }
    
    /**
     * Load chi tiết hóa đơn và cập nhật điểm tự động
     */
    private void loadBillDetails(int billId) {
        try {
            billDetails = this.getBillDetails(billId);
            fillTableWithBillDetails(billDetails);
            calculateTotalAmount();
            
            // Tự động cập nhật điểm nếu có khách hàng và có hóa đơn
            if (currentCustomer != null && totalAmount > 0) {
                int currentPoints = currentCustomer.getPoint_level();
                int newPoints = calculateNewPoints(currentPoints, totalAmount);
                lblPoint.setText(String.valueOf(newPoints));
            } else if (totalAmount > 0) {
                // Nếu chưa có khách hàng nhưng có hóa đơn, hiển thị điểm tiềm năng
                int potentialPoints = (int)(totalAmount / 1000); // 1 điểm cho mỗi 1000đ
                lblPoint.setText(String.valueOf(potentialPoints));
            } else {
                lblPoint.setText("0");
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi load chi tiết hóa đơn: " + e.getMessage());
        }
    }
    
    /**
     * Load thông tin khách hàng
     */
    private void loadCustomerInfo(String phoneNumber) {
        try {
            currentCustomer = this.getCustomerByPhone(phoneNumber);
            if (currentCustomer != null) {
                // Không fill số điện thoại, chỉ cập nhật điểm
                customerPoints = currentCustomer.getPoint_level();
                // Tính điểm mới nếu có hóa đơn
                if (currentBill != null && totalAmount > 0) {
                    int newPoints = calculateNewPoints(customerPoints, totalAmount);
                    lblPoint.setText(String.valueOf(newPoints));
                } else {
                    lblPoint.setText(String.valueOf(customerPoints));
                }
            } else {
                // Không fill số điện thoại, reset điểm
                customerPoints = 0;
                // Hiển thị điểm tiềm năng nếu có hóa đơn
                if (currentBill != null && totalAmount > 0) {
                    int potentialPoints = (int)Math.round(totalAmount / 1000);
                    lblPoint.setText(String.valueOf(potentialPoints));
                } else {
                    lblPoint.setText("0");
                }
            }
        } catch (Exception e) {
            // Không fill số điện thoại, reset điểm
            customerPoints = 0;
            lblPoint.setText("0");
        }
    }
    
    /**
     * Fill dữ liệu vào bảng chi tiết hóa đơn
     */
    private void fillTableWithBillDetails(List<BillDetails> details) {
        tableModel.setRowCount(0);
        if (details != null) {
            for (BillDetails detail : details) {
                                        Object[] row = {
                            detail.getProduct_id(),
                            getProductName(detail.getProduct_id()),
                            detail.getAmount(),
                            formatCurrency(detail.getPrice()),
                            formatDiscount(detail.getDiscount()),
                            formatCurrency(detail.getTotalPrice())
                        };
                tableModel.addRow(row);
            }
        }
    }
    

    
    /**
     * Tính tổng tiền và cập nhật điểm tự động
     */
    private void calculateTotalAmount() {
        totalAmount = this.calculateTotalAmount(billDetails);
        lblTotalAmout.setText(formatCurrency(totalAmount));
        
        // Tự động cập nhật điểm nếu có khách hàng
        if (currentCustomer != null && totalAmount > 0) {
            int currentPoints = currentCustomer.getPoint_level();
            int newPoints = calculateNewPoints(currentPoints, totalAmount);
            lblPoint.setText(String.valueOf(newPoints));
        } else if (totalAmount > 0) {
            // Nếu chưa có khách hàng nhưng có hóa đơn, hiển thị điểm tiềm năng
            int potentialPoints = (int)Math.round(totalAmount / 1000); // 1 điểm cho mỗi 1000đ, làm tròn
            lblPoint.setText(String.valueOf(potentialPoints));
        } else {
            lblPoint.setText("0");
        }
    }
    
    /**
     * Cập nhật hiển thị
     */
    private void updateDisplay() {
        if (currentBill != null) {
            lblTotalAmout.setText(formatCurrency(totalAmount));
            
            // Cập nhật thông tin khách hàng nếu có
            if (currentCustomer != null) {
                int currentPoints = currentCustomer.getPoint_level();
                if (totalAmount > 0) {
                    int newPoints = calculateNewPoints(currentPoints, totalAmount);
                    lblPoint.setText(String.valueOf(newPoints));
                } else {
                    lblPoint.setText(String.valueOf(currentPoints));
                }
            } else if (totalAmount > 0) {
                // Nếu chưa có khách hàng nhưng có hóa đơn, hiển thị điểm tiềm năng
                int potentialPoints = (int)Math.round(totalAmount / 1000); // 1 điểm cho mỗi 1000đ, làm tròn
                lblPoint.setText(String.valueOf(potentialPoints));
            } else {
                lblPoint.setText("0");
            }
        }
    }
    
    /**
     * Xóa hiển thị
     */
    private void clearDisplay() {
        currentBill = null;
        currentCustomer = null;
        billDetails = null;
        totalAmount = 0.0;
        customerPoints = 0;
        
        tableModel.setRowCount(0);
        // Không clear txtPhoneNumber - để user tự nhập
        lblPoint.setText("0");
        lblTotalAmout.setText("0");
    }
    
    /**
     * Xử lý thanh toán với tích điểm tự động
     */
    private void processPayment() {
        if (currentBill == null) {
            XDialog.error("Vui lòng chọn bàn có hóa đơn để thanh toán!", "Lỗi");
            return;
        }
        
        if (totalAmount <= 0) {
            XDialog.warning("Hóa đơn không có món nào để thanh toán!", "Cảnh báo");
            return;
        }
        
        // Lấy số điện thoại từ txtPhoneNumber
        String phoneNumber = txtPhoneNumber.getText().trim();
        Customer customerToUse = currentCustomer;
        
        // Nếu có nhập số điện thoại nhưng chưa tìm customer, thử tìm lại
        if (!XValidation.isEmpty(phoneNumber) && currentCustomer == null) {
            Customer foundCustomer = this.searchCustomer(phoneNumber);
            if (foundCustomer != null) {
                customerToUse = foundCustomer;
                currentCustomer = foundCustomer;
                customerPoints = foundCustomer.getPoint_level();
            }
        }
        
        // Tính điểm sẽ được tích
        int pointsToEarn = 0;
        if (customerToUse != null) {
            pointsToEarn = (int)Math.round(totalAmount / 1000); // 1 điểm cho mỗi 1000đ, làm tròn
        }
        
        // Xác nhận thanh toán với thông tin tích điểm
        String confirmMessage = "Xác nhận thanh toán?\n" +
                              "Tổng tiền: " + formatCurrency(totalAmount);
        
        if (customerToUse != null) {
            confirmMessage += "\nKhách hàng: " + customerToUse.getCustomer_name() +
                            "\nSố điện thoại: " + customerToUse.getPhone_number() +
                            "\nĐiểm hiện tại: " + customerToUse.getPoint_level() +
                            "\nĐiểm sẽ tích thêm: " + pointsToEarn +
                            "\nTổng điểm sau thanh toán: " + (customerToUse.getPoint_level() + pointsToEarn);
        } else {
            confirmMessage += "\nKhách hàng: Khách lẻ (không tích điểm)";
        }
        
        boolean confirm = XDialog.confirm(confirmMessage);
        if (!confirm) {
            return;
        }
        
        // Hiển thị form chọn phương thức thanh toán
        PaymentMethodUI paymentMethodDialog = new PaymentMethodUI(this, totalAmount);
        paymentMethodDialog.setVisible(true);
        
        // Kiểm tra xem người dùng có chọn phương thức thanh toán không
        PaymentMethod selectedPaymentMethod = paymentMethodDialog.getSelectedPaymentMethod();
        if (selectedPaymentMethod == null) {
            // Người dùng hủy chọn phương thức thanh toán
            return;
        }
        
        String paymentNote = paymentMethodDialog.getNote();
        
        // Sử dụng controller để xử lý thanh toán với phương thức đã chọn
        boolean success = this.processPayment(currentBill, customerToUse, totalAmount, selectedTableNumber, selectedPaymentMethod, paymentNote);
        
        if (success) {
            String successMessage = "THANH TOÁN THÀNH CÔNG!\n\n";
            successMessage += "Tổng tiền: " + formatCurrency(totalAmount) + "\n";
            successMessage += "Phương thức: " + selectedPaymentMethod.getMethod_name() + "\n";
            
            if (!paymentNote.trim().isEmpty()) {
                successMessage += "Ghi chú: " + paymentNote + "\n";
            }
            
            if (customerToUse != null) {
                successMessage += "\nKhách hàng: " + customerToUse.getCustomer_name() +
                                "\nSố điện thoại: " + customerToUse.getPhone_number() +
                                "\nĐã tích thêm: " + pointsToEarn + " điểm" +
                                "\nTổng điểm hiện tại: " + (customerToUse.getPoint_level() + pointsToEarn);
            } else {
                successMessage += "\nKhách hàng: Khách lẻ (không tích điểm)";
            }
            
            XDialog.alert(successMessage);
            
            // Clear cache của bàn vừa thanh toán
            removeBillFromCache(selectedTableNumber);
            
            // Reset selection trước khi reload
            if (selectedButton != null) {
                selectedButton.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
                selectedButton = null;
            }
            selectedTableNumber = -1;
            
            // Force refresh giao diện
            try {
                Thread.sleep(100); // Delay nhỏ để đảm bảo database đã commit
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            
            // Reload bàn để cập nhật trạng thái
            loadTables();
            
            // Clear display hoàn toàn
            clearDisplay();
            
            // Force repaint để đảm bảo giao diện cập nhật
            this.repaint();
        }
    }
    
    /**
     * Tạo hội viên mới và tự động cập nhật điểm
     */
    private void createMember() {
        // Kiểm tra xem có hóa đơn để thanh toán không
        if (currentBill == null || totalAmount <= 0) {
            XDialog.alert("Vui lòng chọn bàn có hóa đơn để thanh toán trước khi tạo hội viên!");
            return;
        }
        
        // Mở CustomerUI để tạo hội viên mới
        CustomerUI customerDialog = new CustomerUI();
        customerDialog.setVisible(true);
        
        // Sau khi đóng dialog, kiểm tra xem có tạo thành công không
        if (customerDialog.getCustomer() != null) {
            currentCustomer = customerDialog.getCustomer();
            customerPoints = currentCustomer.getPoint_level();
            
            // Tự động điền số điện thoại vào txtPhoneNumber
            txtPhoneNumber.setText(currentCustomer.getPhone_number());
            
            // Tự động tính điểm mới dựa trên hóa đơn hiện tại
            if (totalAmount > 0) {
                int newPoints = calculateNewPoints(customerPoints, totalAmount);
                lblPoint.setText(String.valueOf(newPoints));
                XDialog.alert("Tạo hội viên thành công!\n" +
                             "Khách hàng: " + currentCustomer.getCustomer_name() + "\n" +
                             "Số điện thoại: " + currentCustomer.getPhone_number() + "\n" +
                             "Số điểm hiện tại: " + customerPoints + "\n" +
                             "Điểm sau thanh toán: " + newPoints + "\n" +
                             "Tổng tiền hóa đơn: " + formatCurrency(totalAmount));
            } else {
                lblPoint.setText(String.valueOf(customerPoints));
                XDialog.alert("Tạo hội viên thành công!\n" +
                             "Khách hàng: " + currentCustomer.getCustomer_name() + "\n" +
                             "Số điện thoại: " + currentCustomer.getPhone_number() + "\n" +
                             "Số điểm hiện tại: " + customerPoints);
            }
        }
    }
    
    // Cập nhật các hàm màu theo yêu cầu cụ thể
    private Color getBaseColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#CCCCCC"); // Trống - xám nhạt
            case 1: return Color.decode("#D6F5D6"); // Đang hoạt động - xanh nhạt
            case 2: return Color.decode("#FFCCCC"); // Ngưng hoạt động - đỏ nhạt
            default: return Color.GRAY;
        }
    }
    
    private Color brightenColor(Color color, float factor) {
        int r = Math.min(255, (int)(color.getRed() + (255 - color.getRed()) * factor));
        int g = Math.min(255, (int)(color.getGreen() + (255 - color.getGreen()) * factor));
        int b = Math.min(255, (int)(color.getBlue() + (255 - color.getBlue()) * factor));
        return new Color(r, g, b);
    }
    
    private Color darkenColor(Color color, float factor) {
        int r = Math.max(0, (int)(color.getRed() * (1 - factor)));
        int g = Math.max(0, (int)(color.getGreen() * (1 - factor)));
        int b = Math.max(0, (int)(color.getBlue() * (1 - factor)));
        return new Color(r, g, b);
    }
    
    // Hover: màu khi đưa chuột tới
    private Color getHoverColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#999999"); // Trống - xám đậm hơn
            case 1: return Color.decode("#ADEBAD"); // Đang hoạt động - xanh đậm hơn
            case 2: return Color.decode("#990000"); // Ngưng hoạt động - đỏ đậm
            default: return Color.GRAY;
        }
    }
    
    // Chọn: màu khi được nhấp vào
    private Color getSelectedColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#666666"); // Trống - xám đậm nhất
            case 1: return Color.decode("#85E085"); // Đang hoạt động - xanh đậm nhất
            case 2: return Color.decode("#660000"); // Ngưng hoạt động - đỏ đậm pha nâu
            default: return Color.GRAY;
        }
    }
    
    // Nhấn chuột: màu khi bấm giữ
    private Color getPressedColorByStatus(int status) {
        return darkenColor(getBaseColorByStatus(status), 0.30f);
    }
    
    /**
     * Tìm kiếm khách hàng theo số điện thoại và tự động cập nhật điểm
     */
    private void searchCustomerByPhone() {
        String phoneNumber = txtPhoneNumber.getText().trim();
        if (XValidation.isEmpty(phoneNumber)) {
            XDialog.warning("Vui lòng nhập số điện thoại để tìm kiếm!", "Cảnh báo");
            txtPhoneNumber.requestFocus();
            return;
        }
        
        // Validate phone number format
        if (!XValidation.isPhone(phoneNumber)) {
            XDialog.warning("Số điện thoại không hợp lệ! Vui lòng nhập 10-11 chữ số.", "Cảnh báo");
            txtPhoneNumber.requestFocus();
            return;
        }
        
        Customer customer = this.searchCustomer(phoneNumber);
        if (customer != null) {
            currentCustomer = customer;
            customerPoints = customer.getPoint_level();
            lblPoint.setText(String.valueOf(customerPoints));
            
            // Tự động tính điểm mới dựa trên hóa đơn hiện tại
            if (currentBill != null && totalAmount > 0) {
                int newPoints = calculateNewPoints(customerPoints, totalAmount);
                lblPoint.setText(String.valueOf(newPoints));
            } else {
                lblPoint.setText(String.valueOf(customerPoints));
            }
            
            int newPoints = (currentBill != null && totalAmount > 0) ? 
                calculateNewPoints(customerPoints, totalAmount) : customerPoints;
            XDialog.alert("Tìm thấy khách hàng: " + customer.getCustomer_name() + 
                         "\nSố điểm hiện tại: " + customerPoints +
                         "\nĐiểm sau thanh toán: " + newPoints);
        } else {
            currentCustomer = null;
            customerPoints = 0;
            lblPoint.setText("0");
            XDialog.alert("Không tìm thấy khách hàng với số điện thoại này!\n" +
                         "Bạn có thể:\n" +
                         "1. Kiểm tra lại số điện thoại\n" +
                         "2. Bấm 'TẠO HỘI VIÊN' để tạo khách hàng mới");
        }
    }
    
    /**
     * Tính điểm mới dựa trên số tiền thanh toán
     * 1 điểm = 1.000 VNĐ
     */
    private int calculateNewPoints(int currentPoints, double totalAmount) {
        int earnedPoints = (int)Math.round(totalAmount / 1000); // 1 điểm cho mỗi 1000đ, làm tròn
        return currentPoints + earnedPoints;
    }
    
    /**
     * Hiển thị thông tin chi tiết hóa đơn và tích điểm
     */
    private void showBillDetailInfo() {
        int row = tbBillDetail.getSelectedRow();
        if (row >= 0) {
            String productId = (String) tbBillDetail.getValueAt(row, 0);
            String productName = (String) tbBillDetail.getValueAt(row, 1);
            int amount = (Integer) tbBillDetail.getValueAt(row, 2);
            String priceStr = (String) tbBillDetail.getValueAt(row, 3);
            String discountStr = (String) tbBillDetail.getValueAt(row, 4);
            String totalStr = (String) tbBillDetail.getValueAt(row, 5);
            
            String info = String.format(
                "Thông tin món:\n" +
                "Mã SP: %s\n" +
                "Tên SP: %s\n" +
                "Số lượng: %d\n" +
                "Đơn giá: %s\n" +
                "Giảm giá: %s\n" +
                "Thành tiền: %s",
                productId, productName, amount, priceStr, discountStr, totalStr
            );
            
            // Thêm thông tin tích điểm nếu có khách hàng
            if (currentCustomer != null && totalAmount > 0) {
                int currentPoints = currentCustomer.getPoint_level();
                int earnedPoints = (int)Math.round(totalAmount / 1000);
                int newPoints = currentPoints + earnedPoints;
                
                info += String.format(
                    "\n\nThông tin tích điểm:\n" +
                    "Khách hàng: %s\n" +
                    "Số điện thoại: %s\n" +
                    "Điểm hiện tại: %d\n" +
                    "Điểm sẽ tích thêm: %d (1 điểm = 1.000 VNĐ)\n" +
                    "Tổng điểm sau thanh toán: %d",
                    currentCustomer.getCustomer_name(),
                    currentCustomer.getPhone_number(),
                    currentPoints,
                    earnedPoints,
                    newPoints
                );
            }
            
            XDialog.alert(info);
        }
    }
    
    // ========== IMPLEMENT PAYMENT CONTROLLER METHODS ==========
    
    @Override
    public void open() {
        this.setVisible(true);
    }
    
    @Override
    public void setForm(Bill entity) {
        // Implementation cho setForm
    }
    
    @Override
    public Bill getForm() {
        return currentBill;
    }
    
    @Override
    public void fillToTable() {
        // Implementation cho fillToTable
    }
    
    @Override
    public void edit() {
        // Implementation cho edit
    }
    
    @Override
    public void create() {
        // Implementation cho create
    }
    
    @Override
    public void update() {
        // Implementation cho update
    }
    
    @Override
    public void delete() {
        // Implementation cho delete
    }
    
    @Override
    public void clear() {
        clearDisplay();
    }
    
    @Override
    public void setEditable(boolean editable) {
        // Implementation cho setEditable
    }
    
    @Override
    public void checkAll() {
        // Implementation cho checkAll
    }
    
    @Override
    public void uncheckAll() {
        // Implementation cho uncheckAll
    }
    
    @Override
    public void deleteCheckedItems() {
        // Implementation cho deleteCheckedItems
    }
    
    @Override
    public List<TableForCustomer> getAllTables() {
        try {
            return tableDAO.findAll();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi load danh sách bàn: " + e.getMessage());
            return new ArrayList<>();
        }
    }
    
    @Override
    public Bill getBillByTableNumber(int tableNumber) {
        try {
            // Kiểm tra cache trước (bỏ qua cache nếu đã thanh toán)
            if (tableBillCache.containsKey(tableNumber)) {
                Bill cachedBill = tableBillCache.get(tableNumber);
                // Chỉ trả về bill từ cache nếu đang hoạt động, không phải đã thanh toán
                if (cachedBill != null && cachedBill.getStatus() != null && cachedBill.getStatus() == 0) {
                    return cachedBill;
                } else {
                    // Nếu bill đã thanh toán, xóa khỏi cache
                    tableBillCache.remove(tableNumber);
                }
            }
            
            // Tìm bill đang hoạt động của bàn này
            List<Bill> allBills = billDAO.findAll();
            Bill activeBill = allBills.stream()
                .filter(bill -> bill.getTable_number() == tableNumber && bill.getStatus() != null && bill.getStatus() == 0)
                .findFirst()
                .orElse(null);
            
            if (activeBill != null) {
                // Lưu vào cache
                tableBillCache.put(tableNumber, activeBill);
                return activeBill;
            }
            
            // Nếu không có bill đang hoạt động, trả về null (bàn trống)
            // Không tìm bill cuối cùng vì có thể đã thanh toán
            return null;
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi load hóa đơn: " + e.getMessage());
            return null;
        }
    }
    
    @Override
    public List<BillDetails> getBillDetails(int billId) {
        try {
            return billDetailsDAO.findByBillId(billId);
        } catch (Exception e) {
            XDialog.alert("Lỗi khi load chi tiết hóa đơn: " + e.getMessage());
            return new ArrayList<>();
        }
    }
    
    @Override
    public Customer getCustomerByPhone(String phoneNumber) {
        try {
            return customerDAO.findById(phoneNumber);
        } catch (Exception e) {
            return null;
        }
    }
    
    @Override
    public double calculateTotalAmount(List<BillDetails> billDetails) {
        double total = 0.0;
        if (billDetails != null) {
            for (BillDetails detail : billDetails) {
                total += detail.getTotalPrice();
            }
        }
        return total;
    }
    
    @Override
    @Deprecated
    public boolean processPayment(Bill bill, Customer customer, double totalAmount, int tableNumber) {
        // Gọi method mới với phương thức thanh toán mặc định (tiền mặt)
        PaymentMethod defaultMethod = new PaymentMethod();
        defaultMethod.setPayment_method_id(1);
        defaultMethod.setMethod_name("Tiền mặt");
        return processPayment(bill, customer, totalAmount, tableNumber, defaultMethod, "Thanh toán hóa đơn bàn " + tableNumber);
    }
    
    @Override
    public boolean processPayment(Bill bill, Customer customer, double totalAmount, int tableNumber, PaymentMethod paymentMethod, String note) {
        try {
            // Validate input
            if (bill == null) {
                XDialog.alert("Không có hóa đơn để thanh toán!");
                return false;
            }
            
            if (totalAmount <= 0) {
                XDialog.alert("Hóa đơn không có món nào để thanh toán!");
                return false;
            }
            
            // Validate payment method
            if (paymentMethod == null) {
                XDialog.alert("Phương thức thanh toán không hợp lệ!");
                return false;
            }
            
            // Tạo payment history với phương thức thanh toán đã chọn
            PaymentHistory payment = new PaymentHistory();
            // Không cần set payment_history_id vì là IDENTITY (auto-increment)
            payment.setPayment_method_id(paymentMethod.getPayment_method_id());
            payment.setPayment_date(new Date());
            payment.setTotal_amount(totalAmount);
            payment.setStatus("Thành công");
            payment.setNote(note != null && !note.trim().isEmpty() ? note : "Thanh toán hóa đơn bàn " + tableNumber);

            paymentHistoryDAO.create(payment);

            // Cập nhật bill với số điện thoại khách hàng (không cần payment_history_id vì có thể NULL)
            // bill.setPayment_history_id sẽ để NULL vì việc lấy ID sau INSERT khá phức tạp với Oracle IDENTITY
            bill.setStatus(1); // Đã thanh toán
            bill.setCheckout(new Date());
            bill.setTotal_amount(totalAmount);
            
            // Cập nhật số điện thoại khách hàng vào bill nếu có
            if (customer != null) {
                bill.setPhone_number(customer.getPhone_number());
            }
            
            billDAO.update(bill);
            
            // Tự động tích điểm cho khách hàng (1 điểm = 1.000 VNĐ)
            if (customer != null) {
                int currentPoints = customer.getPoint_level();
                int earnedPoints = (int)Math.round(totalAmount / 1000); // 1 điểm cho mỗi 1000đ, làm tròn
                int newPoints = currentPoints + earnedPoints;
                
                // Cập nhật điểm khách hàng
                customer.setPoint_level(newPoints);
                customerDAO.update(customer);
                
                // Log thông tin tích điểm
                LOGGER.log(Level.INFO, "Tích điểm thành công: " + customer.getCustomer_name() + 
                                 " - Điểm cũ: " + currentPoints + 
                                 " - Điểm mới: " + newPoints + 
                                 " - Tích thêm: " + earnedPoints + " điểm");
            }
            
            // Cập nhật trạng thái bàn
            TableForCustomer table = tableDAO.findById(tableNumber);
            if (table != null) {
                LOGGER.log(Level.INFO, "Cập nhật trạng thái bàn " + tableNumber + " từ " + table.getStatus() + " thành 0 (trống)");
                table.setStatus(0); // Trống
                tableDAO.update(table);
                LOGGER.log(Level.INFO, "Đã cập nhật trạng thái bàn " + tableNumber + " thành công");
            } else {
                LOGGER.log(Level.WARNING, "Không tìm thấy bàn " + tableNumber + " để cập nhật trạng thái");
            }
            
            // Xóa bill khỏi cache khi thanh toán xong
            removeBillFromCache(tableNumber);
            LOGGER.log(Level.INFO, "Đã xóa bill của bàn " + tableNumber + " khỏi cache");
            
            return true;
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi thanh toán: " + e.getMessage());
            return false;
        }
    }
    
    @Override
    public boolean createMember(String phoneNumber, String customerName) {
        try {
            // Validate input
            if (XValidation.isEmpty(phoneNumber)) {
                XDialog.warning("Vui lòng nhập số điện thoại!", "Cảnh báo");
                return false;
            }
            
            if (!XValidation.isPhone(phoneNumber)) {
                XDialog.warning("Số điện thoại không hợp lệ! Vui lòng nhập 10-11 chữ số.", "Cảnh báo");
                return false;
            }
            
            if (XValidation.isEmpty(customerName)) {
                XDialog.warning("Vui lòng nhập tên khách hàng!", "Cảnh báo");
                return false;
            }
            
            // Kiểm tra khách hàng đã tồn tại
            Customer existingCustomer = customerDAO.findById(phoneNumber);
            if (existingCustomer != null) {
                XDialog.alert("Khách hàng này đã tồn tại trong hệ thống!");
                return false;
            }
            
            // Tạo khách hàng mới
            Customer newCustomer = new Customer();
            newCustomer.setPhone_number(phoneNumber);
            newCustomer.setCustomer_name(customerName);
            newCustomer.setPoint_level(0);
            newCustomer.setLevel_ranking("Bronze");
            newCustomer.setCreated_date(new Date());
            
            customerDAO.create(newCustomer);
            
            return true;
            
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tạo hội viên: " + e.getMessage());
            return false;
        }
    }
    
    @Override
    public Customer searchCustomer(String phoneNumber) {
        try {
            if (XValidation.isEmpty(phoneNumber)) {
                return null;
            }
            
            return customerDAO.findById(phoneNumber);
            
        } catch (Exception e) {
            return null;
        }
    }
    
    @Override
    public String getProductName(String productId) {
        try {
            String sql = "SELECT product_name FROM PRODUCT WHERE product_id = ?";
            String productName = XJdbc.executeQuery(sql, rs -> {
                if (rs.next()) {
                    return rs.getString("product_name");
                }
                return null;
            }, productId);
            return productName != null ? productName : "Unknown";
        } catch (Exception e) {
            return "Unknown";
        }
    }
    


    /**
     * Cleanup resources khi đóng form
     */
    public void cleanup() {
        try {
            // Clear cache
            if (tableBillCache != null) {
                tableBillCache.clear();
            }
            
            // Clear current data
            currentBill = null;
            currentCustomer = null;
            billDetails = null;
            
            // Clear table model
            if (tableModel != null) {
                tableModel.setRowCount(0);
            }
            
            LOGGER.log(Level.INFO, "PayUI cleanup completed");
            
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Error during cleanup", e);
        }
    }
    
    /**
     * Override dispose để cleanup resources
     */
    @Override
    public void dispose() {
        cleanup();
        super.dispose();
    }

    /**
     * Validate phone number format
     */
    private boolean isValidPhoneNumber(String phoneNumber) {
        if (XValidation.isEmpty(phoneNumber)) {
            return false;
        }
        // Vietnamese phone number format: 10-11 digits
        return XValidation.isPhone(phoneNumber);
    }
    
    /**
     * Validate table number
     */
    private boolean isValidTableNumber(int tableNumber) {
        return tableNumber >= 1 && tableNumber <= 24;
    }
    
    /**
     * Validate bill amount
     */
    private boolean isValidAmount(double amount) {
        return amount >= 0;
    }

    /**
     * Kiểm tra kết nối database
     */
    private boolean checkDatabaseConnection() {
        try {
            // Test connection bằng cách thực hiện một query đơn giản
            String testSql = "SELECT 1 FROM DUAL";
            XJdbc.executeQuery(testSql, rs -> {
                if (rs.next()) {
                    return rs.getInt(1);
                }
                return null;
            });
            return true;
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Database connection failed", e);
            XDialog.alert("Lỗi kết nối database: " + e.getMessage() + 
                         "\nVui lòng kiểm tra:\n" +
                         "1. Oracle Database đã được khởi động\n" +
                         "2. Thông tin kết nối trong XJdbc.java\n" +
                         "3. Network connection");
            return false;
        }
    }
}
