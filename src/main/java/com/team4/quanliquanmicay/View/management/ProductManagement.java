/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View.management;

import com.team4.quanliquanmicay.util.XTheme;
import com.team4.quanliquanmicay.Controller.ProductController;
import com.team4.quanliquanmicay.Entity.Product;
import com.team4.quanliquanmicay.DAO.CategoryDAO;
import com.team4.quanliquanmicay.Entity.Category;
import com.team4.quanliquanmicay.Impl.CategoryDAOImpl;
import com.team4.quanliquanmicay.DAO.ProductDAO;
import com.team4.quanliquanmicay.Impl.ProductDAOImpl;
import static com.team4.quanliquanmicay.util.XValidation.isEmpty;
import static com.team4.quanliquanmicay.util.XValidation.isNumber;
import com.team4.quanliquanmicay.util.XDialog;
import com.team4.quanliquanmicay.util.XValidation;

import java.util.List;

/**
 *
 * @author HP
 */
public class ProductManagement extends javax.swing.JFrame implements ProductController{

    // Thêm DAO cho category
    private CategoryDAO categoryDAO = new CategoryDAOImpl();
    private ProductDAO productDAO = new ProductDAOImpl();

    // Thêm cache cho sản phẩm và danh mục
    private java.util.List<Product> productCache = new java.util.ArrayList<>();
    private java.util.List<Category> categoryCache = new java.util.ArrayList<>();
    private boolean isProductCacheValid = false;
    private boolean isCategoryCacheValid = false;
    
    // Biến lưu tên ảnh hiện tại
    private String currentImageName = "";
    
    // Biến để kiểm soát kích thước ảnh
    private java.awt.Dimension originalImageSize = null;

    private javax.swing.Timer searchDebounceTimer;
    private boolean lastSearchHadNoResult = false;

    /**
     * Creates new form MonAnJDialog
     */
    public ProductManagement() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        this.setLocationRelativeTo(null);
        
        fillCategories(); // Gọi fillCategories khi khởi tạo dialog
        fillStatus(); // Gọi duy nhất ở đây
        cboCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillToTable();
                fillUnitsByCategory();
                if (cboUnit.getItemCount() > 0) cboUnit.setSelectedIndex(0);
            }
        });
        fillUnitsByCategory();
        createCategoryTabs(); // Tạo tabpanel cho từng loại món
        fillToTable();
        setupSearchFunctionality();
        setupImageSelection(); // Thêm setup cho chọn ảnh
        captureInitialImageSize(); // Capture kích thước ban đầu của ảnh
        // Disable button update ban đầu
        btnUpdate.setEnabled(false);
        // Đảm bảo khi đổi trạng thái thì có thể cập nhật
        cboStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (btnUpdate.isEnabled()) { // Chỉ enable nếu đã có product được chọn
                    btnUpdate.setEnabled(true);
                }
            }
        });
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtProduct_Id = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNameProduct = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cboCate = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cboUnit = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cboStatus = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreNote = new javax.swing.JTextArea();
        lblImage = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 51, 51));

        jPanel3.setBackground(new java.awt.Color(134, 39, 43));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MÓN ĂN FIVE C");

        jPanel4.setBackground(new java.awt.Color(204, 164, 133));

        btnExit.setBackground(new java.awt.Color(185, 163, 147));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setForeground(new java.awt.Color(204, 204, 204));
        btnExit.setText("Thoát");
        btnExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 164, 133));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/Search.png"))); // NOI18N
        jLabel6.setToolTipText("");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setPreferredSize(new java.awt.Dimension(150, 25));
        txtSearch.setMaximumSize(new java.awt.Dimension(150, 25));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(6, 6, 6)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(282, 282, 282))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.setBackground(new java.awt.Color(204, 164, 133));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        tableInfo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã món ăn", "Tên món ăn", "Giá", "Giảm giá", "Đơn vị", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInfoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableInfo);
        if (tableInfo.getColumnModel().getColumnCount() > 0) {
            tableInfo.getColumnModel().getColumn(0).setResizable(false);
            tableInfo.getColumnModel().getColumn(1).setResizable(false);
            tableInfo.getColumnModel().getColumn(2).setMinWidth(40);
            tableInfo.getColumnModel().getColumn(2).setMaxWidth(60);
            tableInfo.getColumnModel().getColumn(3).setResizable(false);
            tableInfo.getColumnModel().getColumn(4).setResizable(false);
            tableInfo.getColumnModel().getColumn(5).setResizable(false);
        }

        jTabbedPane1.addTab("Mì Cay", jScrollPane3);

        jPanel5.setBackground(new java.awt.Color(204, 164, 133));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mã món :");

        txtProduct_Id.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtProduct_Id.setPreferredSize(new java.awt.Dimension(150, 25));
        txtProduct_Id.setMaximumSize(new java.awt.Dimension(150, 25));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tên món :");

        txtNameProduct.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNameProduct.setPreferredSize(new java.awt.Dimension(150, 25));
        txtNameProduct.setMaximumSize(new java.awt.Dimension(150, 25));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Loại món");

        cboCate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboCate.setForeground(new java.awt.Color(204, 204, 204));
        cboCate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mỳ Cay ", "Đồ ăn vặt ", "Combo", "Nước giải khát", " " }));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Giá :");

        txtPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPrice.setPreferredSize(new java.awt.Dimension(150, 25));
        txtPrice.setMaximumSize(new java.awt.Dimension(150, 25));
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Giảm Giá:");

        txtDiscount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDiscount.setPreferredSize(new java.awt.Dimension(150, 25));
        txtDiscount.setMaximumSize(new java.awt.Dimension(150, 25));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Đơn Vị");

        cboUnit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboUnit.setForeground(new java.awt.Color(204, 204, 204));
        cboUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Trạng thái :");

        cboStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboStatus.setForeground(new java.awt.Color(204, 204, 204));
        cboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chưa có ", "Cần cập nhật", " " }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Ghi chú :");

        txtAreNote.setColumns(20);
        txtAreNote.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAreNote.setRows(5);
        jScrollPane1.setViewportView(txtAreNote);

        lblImage.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        lblImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        // Cố định kích thước cho lblImage để tránh tràn UI
        lblImage.setPreferredSize(new java.awt.Dimension(200, 200));
        lblImage.setMinimumSize(new java.awt.Dimension(200, 200));
        lblImage.setMaximumSize(new java.awt.Dimension(200, 200));

        btnSave.setBackground(new java.awt.Color(185, 163, 147));
        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Thêm");
        btnSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(185, 163, 147));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Cập nhật");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(185, 163, 147));
        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Làm mới");
        btnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtNameProduct, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cboCate, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtProduct_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtProduct_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNameProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboCate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cboUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(476, 476, 476)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1237, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.out.println("Button Exit clicked!");
        // Xác nhận trước khi thoát
        if (XDialog.confirm("Bạn có chắc chắn muốn thoát không?", "Xác nhận thoát")) {
            this.dispose();
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void tableInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInfoMouseClicked
        // Method này không còn cần thiết vì mỗi table có mouse listener riêng
    }//GEN-LAST:event_tableInfoMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        System.out.println("Button Update clicked!");
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        System.out.println("Button Clear clicked!");
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        System.out.println("Button Save clicked!");
        create();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboCate;
    private javax.swing.JComboBox<String> cboStatus;
    private javax.swing.JComboBox<String> cboUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTable tableInfo;
    private javax.swing.JTextArea txtAreNote;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtNameProduct;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProduct_Id;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    @Override
    public void fillCategories() {
        cboCate.removeAllItems();
        if (!isCategoryCacheValid || categoryCache.isEmpty()) {
            categoryCache = categoryDAO.findAll();
            isCategoryCacheValid = true;
        }
        for (Category cate : categoryCache) {
            if (cate.getIs_available() == 1) {
                cboCate.addItem(cate.getCategory_name());
            }
        }
    }

    @Override
    public void fillStatus() {
        cboStatus.removeAllItems();
        cboStatus.addItem("Còn bán");
        cboStatus.addItem("Ngừng bán");
    }

    @Override
    public void chooseImage() {
    }

    @Override
    public void open() {
    }

    @Override
    public void setForm(Product entity) {
        if (entity == null) return;
        fillStatus();
        txtProduct_Id.setText(entity.getProductId());
        txtProduct_Id.setEditable(false);
        txtNameProduct.setText(entity.getProductName());
        txtPrice.setText(String.valueOf(entity.getPrice()));
        txtAreNote.setText(entity.getNote());
        // Set category name lên cboCate từ cache
        Category cate = getCategoryFromCache(entity.getCategoryId());
        String oldCate = (String) cboCate.getSelectedItem();
        if (cate != null && !cate.getCategory_name().equals(oldCate)) {
            cboCate.setSelectedItem(cate.getCategory_name());
            fillUnitsByCategory();
        }
        // Đảm bảo đơn vị hiện tại luôn có trong comboBox
        String unit = entity.getUnit();
        boolean found = false;
        for (int i = 0; i < cboUnit.getItemCount(); i++) {
            if (unit != null && unit.equals(cboUnit.getItemAt(i))) {
                found = true;
                break;
            }
        }
        if (!found && unit != null && !unit.isEmpty()) {
            cboUnit.addItem(unit);
        }
        cboUnit.setSelectedItem(unit);
        cboStatus.setSelectedItem(entity.isAvailable() ? "Còn bán" : "Ngừng bán");
        double discount = entity.getDiscount();
        if (discount > 0) {
            int percent = (int)Math.round(discount * 100);
            txtDiscount.setText(String.valueOf(percent));
        } else {
            txtDiscount.setText("0");
        }
        // Enable button update khi có dữ liệu sản phẩm
        btnUpdate.setEnabled(true);
        // ====== FILL ẢNH SẢN PHẨM TƯƠNG TỰ NHÂN VIÊN ======
        String imageName = "";
        try { imageName = entity.getImage(); } catch (Exception ex) { imageName = ""; }
        setCurrentImageName(imageName); // Lưu tên ảnh hiện tại
        
        // Force refresh image display
        final String finalImageName = imageName; // Make final for lambda
        java.awt.EventQueue.invokeLater(() -> {
            fillProductImage(finalImageName);
            enforceFixedImageSize();
        });
    }

    @Override
    public Product getForm() {
        Product p = new Product();
        // Lấy giá trị trực tiếp từ form, không phụ thuộc cache
        String productId = txtProduct_Id.getText().trim();
        if (isEmpty(productId)) {
            XDialog.alert("Vui lòng nhập mã món!");
            txtProduct_Id.requestFocus();
            throw new RuntimeException("Mã món không được để trống!");
        }
        if (!productId.matches("^[a-zA-Z0-9_]+$")) {
            XDialog.alert("Mã món chỉ được chứa chữ, số, gạch dưới!");
            txtProduct_Id.requestFocus();
            throw new RuntimeException("Mã món không hợp lệ!");
        }
        if (productId.length() > 10) {
            XDialog.alert("Mã món tối đa 10 ký tự!");
            txtProduct_Id.requestFocus();
            throw new RuntimeException("Mã món tối đa 10 ký tự!");
        }
        p.setProductId(productId);
        String productName = txtNameProduct.getText().trim();
        if (isEmpty(productName)) {
            XDialog.alert("Vui lòng nhập tên món!");
            txtNameProduct.requestFocus();
            throw new RuntimeException("Tên món không được để trống!");
        }
        if (productName.length() > 50) {
            XDialog.alert("Tên món tối đa 50 ký tự!");
            txtNameProduct.requestFocus();
            throw new RuntimeException("Tên món tối đa 50 ký tự!");
        }
        // Chỉ cho phép chữ, số, khoảng trắng, dấu tiếng Việt, không ký tự đặc biệt lạ
                if (!productName.matches("^[\\p{L}0-9 .,'-]+$")) {
            XDialog.alert("Tên món chỉ được chứa chữ, số, khoảng trắng và một số ký tự hợp lệ!");
            txtNameProduct.requestFocus();
            throw new RuntimeException("Tên món không hợp lệ!");
        }
        p.setProductName(productName);
        String priceStr = txtPrice.getText().trim();
        if (isEmpty(priceStr) || !isNumber(priceStr)) {
            XDialog.alert("Đơn giá phải là số lớn hơn 0!");
            txtPrice.requestFocus();
            throw new RuntimeException("Đơn giá không hợp lệ!");
        }
        double price = Double.parseDouble(priceStr);
        if (price <= 0) {
            XDialog.alert("Đơn giá phải lớn hơn 0!");
            txtPrice.requestFocus();
            throw new RuntimeException("Đơn giá phải lớn hơn 0!");
        }
        p.setPrice(price);
        String discountStr = txtDiscount.getText().trim();
        double discount = 0;
        if (!isEmpty(discountStr)) {
            if (!isNumber(discountStr)) {
                XDialog.alert("Giảm giá phải là số!");
                txtDiscount.requestFocus();
                throw new RuntimeException("Giảm giá không hợp lệ!");
            }
            discount = Double.parseDouble(discountStr);
            if (discount > 1) discount = discount / 100.0;
        }
        if (discount < 0 || discount > 1) {
            XDialog.alert("Giảm giá phải từ 0 đến 100!");
            txtDiscount.requestFocus();
            throw new RuntimeException("Giảm giá phải từ 0 đến 100!");
        }
        p.setDiscount(discount);
        p.setNote(txtAreNote.getText().trim());
        String cateName = (String) cboCate.getSelectedItem();
        String cateId = getCategoryIdByName(cateName);
        p.setCategoryId(cateId);
        String status = (String) cboStatus.getSelectedItem();
        p.setIsAvailable("Còn bán".equals(status) ? 1 : 0);
        p.setCreatedDate(null);
        String unit = (String) cboUnit.getSelectedItem();
        if (unit == null || unit.trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn đơn vị!");
            cboUnit.requestFocus();
            throw new RuntimeException("Đơn vị không được để trống!");
        }
        p.setUnit(unit);
        
        // Lưu tên ảnh hiện tại (nếu có)
        String currentImageName = getCurrentImageName();
        p.setImage(currentImageName);
        
        return p;
    }

    @Override
    public void fillToTable() {
        // Load cache nếu cần
        if (!isProductCacheValid || productCache.isEmpty()) {
            productCache = productDAO.findAll();
            isProductCacheValid = true;
        }
        if (!isCategoryCacheValid || categoryCache.isEmpty()) {
            categoryCache = categoryDAO.findAll();
            isCategoryCacheValid = true;
        }
        
        // Tạo map để tra cứu nhanh
        java.util.Map<String, String> categoryMap = new java.util.HashMap<>();
        for (Category cate : categoryCache) {
            categoryMap.put(cate.getCategory_id(), cate.getCategory_name());
        }
        
        // Tạo map để nhóm sản phẩm theo category
        java.util.Map<String, java.util.List<Product>> productsByCategory = new java.util.HashMap<>();
        
        // Nhóm sản phẩm theo category
        for (Product p : productCache) {
            String categoryId = p.getCategoryId();
            if (!productsByCategory.containsKey(categoryId)) {
                productsByCategory.put(categoryId, new java.util.ArrayList<>());
            }
            productsByCategory.get(categoryId).add(p);
        }
        
        // Format cho tiền tệ
        java.text.DecimalFormat vndFormat = new java.text.DecimalFormat("###,### VNĐ");
        
        // Cập nhật từng tab
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            javax.swing.JScrollPane scrollPane = (javax.swing.JScrollPane) jTabbedPane1.getComponentAt(i);
            javax.swing.JTable table = (javax.swing.JTable) scrollPane.getViewport().getView();
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) table.getModel();
            
            // Clear table
            model.setRowCount(0);
            
            // Lấy tên category của tab này
            String tabTitle = jTabbedPane1.getTitleAt(i);
            String categoryId = getCategoryIdByName(tabTitle);
            
            // Lấy danh sách sản phẩm của category này
            java.util.List<Product> categoryProducts = productsByCategory.get(categoryId);
            if (categoryProducts != null) {
                for (Product p : categoryProducts) {
                    // Hiển thị giảm giá dạng phần trăm
                    String discountStr = "";
                    double discount = p.getDiscount();
                    if (discount > 0) {
                        int percent = (int)Math.round(discount * 100);
                        discountStr = percent + "%";
                    } else {
                        discountStr = "0%";
                    }
                    
                    // Format giá tiền
                    String priceStr = vndFormat.format(p.getPrice());
                    
                    model.addRow(new Object[] {
                        p.getProductId(),
                        p.getProductName(),
                        priceStr,
                        discountStr,
                        p.getUnit(),
                        p.isAvailable() ? "Còn bán" : "Ngừng bán"
                    });
                }
            }
            
            // Set column widths cho table này
            setColumnWidthsForTable(table);
        }
    }
    
    /**
     * ✅ OPTIMIZED: Set column widths for specific table
     */
    private void setColumnWidthsForTable(javax.swing.JTable table) {
        table.getColumnModel().getColumn(0).setPreferredWidth(80);   // Mã món ăn
        table.getColumnModel().getColumn(1).setPreferredWidth(220);  // Tên món ăn
        table.getColumnModel().getColumn(2).setPreferredWidth(100);  // Giá
        table.getColumnModel().getColumn(3).setPreferredWidth(60);   // Giảm giá
        table.getColumnModel().getColumn(4).setPreferredWidth(60);   // Đơn vị
        table.getColumnModel().getColumn(5).setPreferredWidth(80);   // Trạng thái
    }

    @Override
    public void edit() {
    }

    @Override
    public void create() {
        try {
            Product product = getForm();
            
            // Kiểm tra tên sản phẩm đã tồn tại chưa
            List<Product> existingProducts = productDAO.findAll();
            boolean nameExists = existingProducts.stream()
                .anyMatch(p -> p.getProductName().equalsIgnoreCase(product.getProductName()));
            
            if (nameExists) {
                XDialog.warning("Tên sản phẩm đã tồn tại!", "Cảnh báo");
                return;
            }
            
            // Hiển thị dialog xác nhận thêm
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn thêm sản phẩm '" + product.getProductName() + "'?", 
                "Xác nhận thêm"
            );
            
            if (confirm) {
                productDAO.create(product);
                XDialog.success("Thêm sản phẩm thành công!", "Thành công");
                // Invalidate cache để load dữ liệu mới từ database
                invalidateProductCache();
                fillToTable();
                clear();
            }
        } catch (RuntimeException e) {
            // Validation errors từ getForm() được handle ở đây
            // Error dialog đã được hiển thị trong getForm()
        } catch (Exception e) {
            XDialog.error("Lỗi khi thêm sản phẩm: " + e.getMessage(), "Lỗi");
        }
    }

    @Override
    public void update() {
        try {
            Product product = getForm();
            
            // Kiểm tra tên sản phẩm đã tồn tại chưa (trừ chính nó)
            List<Product> existingProducts = productDAO.findAll();
            boolean nameExists = existingProducts.stream()
                .anyMatch(p -> p.getProductName().equalsIgnoreCase(product.getProductName()) 
                    && !p.getProductId().equals(product.getProductId()));
            
            if (nameExists) {
                XDialog.warning("Tên sản phẩm đã tồn tại!", "Cảnh báo");
                return;
            }
            
            // Hiển thị dialog xác nhận cập nhật
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn cập nhật sản phẩm '" + product.getProductName() + "'?", 
                "Xác nhận cập nhật"
            );
            
            if (confirm) {
                productDAO.update(product);
                XDialog.success("Cập nhật sản phẩm thành công!", "Thành công");
                // Invalidate cache để load dữ liệu mới từ database
                invalidateProductCache();
                fillToTable();
                clear();
            }
        } catch (RuntimeException e) {
            // Validation errors từ getForm() được handle ở đây
            // Error dialog đã được hiển thị trong getForm()
        } catch (Exception e) {
            XDialog.error("Lỗi khi cập nhật sản phẩm: " + e.getMessage(), "Lỗi");
        }
    }

    @Override
    public void clear() {
        txtProduct_Id.setText("");
        txtProduct_Id.setEditable(true); // Cho phép nhập mã mới khi thêm
        txtNameProduct.setText("");
        txtPrice.setText("");
        txtAreNote.setText("");
        txtDiscount.setText("");
        cboStatus.setSelectedIndex(0); // Trạng thái về mặc định
        // Giữ cboCate như cũ, chỉ fill lại đơn vị
        fillUnitsByCategory();
        if (cboUnit.getItemCount() > 0) cboUnit.setSelectedIndex(0);
        // Disable button update khi clear form
        btnUpdate.setEnabled(false);
        // ====== FILL ẢNH SẢN PHẨM TƯƠNG TỰ NHÂN VIÊN ======
        setCurrentImageName(""); // Reset tên ảnh
        fillProductImage(""); // Clear image
    }

    @Override
    public void setEditable(boolean editable) {
    }

    @Override
    public void checkAll() {
    }

    @Override
    public void uncheckAll() {
    }

    @Override
    public void deleteCheckedItems() {
    }

    @Override
    public void delete() {
        try {
            Product product = getForm();
            if (product == null || XValidation.isEmpty(product.getProductId())) {
                XDialog.error("Vui lòng chọn sản phẩm cần xóa!", "Lỗi");
                return;
            }
            
            // Hiển thị dialog xác nhận xóa
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn xóa sản phẩm '" + product.getProductName() + "'?\n" +
                "Hành động này không thể hoàn tác!", 
                "Xác nhận xóa"
            );
            
            if (confirm) {
                productDAO.deleteById(product.getProductId());
                XDialog.success("Xóa sản phẩm thành công!", "Thành công");
                // Invalidate cache để load dữ liệu mới từ database
                invalidateProductCache();
                fillToTable();
                clear();
            }
        } catch (Exception e) {
            XDialog.error("Lỗi khi xóa sản phẩm: " + e.getMessage(), "Lỗi");
        }
    }

    private Product getProductFromCache(String productId) {
        String trimmedId = productId.trim().toLowerCase();
        for (Product p : productCache) {
            if (p.getProductId().trim().toLowerCase().equals(trimmedId)) return p;
        }
        return null;
    }

    private Category getCategoryFromCache(String categoryId) {
        for (Category c : categoryCache) {
            if (c.getCategory_id().equals(categoryId)) return c;
        }
        return null;
    }

    private String getCategoryIdByName(String cateName) {
        for (Category c : categoryCache) {
            if (cateName.equals(c.getCategory_name())) return c.getCategory_id();
        }
        return "";
    }

    private void invalidateProductCache() {
        isProductCacheValid = false;
        productCache.clear();
    }
    private void invalidateCategoryCache() {
        isCategoryCacheValid = false;
        categoryCache.clear();
    }

    // Hàm fill đơn vị theo loại món
    private void fillUnitsByCategory() {
        cboUnit.removeAllItems();
        String cateName = (String) cboCate.getSelectedItem();
        if (cateName == null) {
            cboUnit.setEnabled(false);
            return;
        }
        String cateId = getCategoryIdByName(cateName);
        java.util.List<String> units = productDAO.findUnitsByCategoryId(cateId);
        if (units.isEmpty()) {
            cboUnit.setEnabled(false);
            cboUnit.addItem("<Không có đơn vị>");
            XDialog.alert("Loại món này chưa có đơn vị nào! Vui lòng thêm sản phẩm mẫu trước.");
        } else {
            cboUnit.setEnabled(true);
            for (String u : units) cboUnit.addItem(u);
        }
    }

    // Thêm phương thức tạo tabpanel cho từng loại món
    private void createCategoryTabs() {
        // Xóa tab cũ
        jTabbedPane1.removeAll();
        
        // Load categories nếu cần
        if (!isCategoryCacheValid || categoryCache.isEmpty()) {
            categoryCache = categoryDAO.findAll();
            isCategoryCacheValid = true;
        }
        
        // Tạo tab cho từng loại món
        for (Category category : categoryCache) {
            if (category.getIs_available() == 1) {
                // Tạo panel cho tab
                javax.swing.JPanel tabPanel = new javax.swing.JPanel();
                tabPanel.setLayout(new java.awt.BorderLayout());
                tabPanel.setBackground(new java.awt.Color(255, 255, 255));
                
                // Tạo table cho tab này
                javax.swing.JTable categoryTable = new javax.swing.JTable();
                categoryTable.setFont(new java.awt.Font("Segoe UI", 0, 14));
                categoryTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {},
                    new String [] {
                        "Mã món ăn", "Tên món ăn", "Giá", "Giảm giá", "Đơn vị", "Trạng thái"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                
                // Thêm mouse listener cho table
                categoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        int row = categoryTable.getSelectedRow();
                        if (row >= 0) {
                            String productId = (String) categoryTable.getValueAt(row, 0);
                            Product product = getProductFromCache(productId);
                            setForm(product);
                        }
                    }
                });
                
                // Tạo scroll pane cho table
                javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(categoryTable);
                scrollPane.setPreferredSize(new java.awt.Dimension(700, 250)); // Kích thước cố định
                tabPanel.add(scrollPane, java.awt.BorderLayout.CENTER);
                
                // Thêm tab vào tabbed pane
                jTabbedPane1.addTab(category.getCategory_name(), scrollPane);
            }
        }
        
        // Set kích thước cố định cho tabbed pane
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(700, 250));
    }

    private void setupSearchFunctionality() {
        txtSearch.setText("Tìm theo tên món...");
        txtSearch.setForeground(java.awt.Color.GRAY);

        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtSearch.getText().equals("Tìm theo tên món...")) {
                    txtSearch.setText("");
                    txtSearch.setForeground(java.awt.Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (txtSearch.getText().isEmpty()) {
                    txtSearch.setText("Tìm theo tên món...");
                    txtSearch.setForeground(java.awt.Color.GRAY);
                }
            }
        });

        // Khởi tạo timer với delay 2 giây
        searchDebounceTimer = new javax.swing.Timer(2000, new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performSearch();
            }
        });
        searchDebounceTimer.setRepeats(false);

        // Thêm DocumentListener để debounce
        txtSearch.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) { 
                debounceSearch(); 
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) { 
                debounceSearch(); 
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) { 
                debounceSearch(); 
            }
        });
        
        // Thêm ActionListener cho txtSearch để có thể search ngay khi nhấn Enter
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performSearch();
            }
        });
    }

    private void debounceSearch() {
        // Reset timer mỗi khi có thay đổi
        searchDebounceTimer.restart();
        
        // Nếu đang gõ, ẩn thông báo "không tìm thấy" nếu có
        if (lastSearchHadNoResult) {
            lastSearchHadNoResult = false;
        }
    }

    private void performSearch() {
        String searchText = txtSearch.getText().trim();
        
        // Bỏ qua nếu là placeholder text
        if (searchText.isEmpty() || searchText.equals("Tìm theo tên món...")) {
            fillToTable(); // Load lại tất cả sản phẩm theo tab hiện tại
            return;
        }

        // Tìm kiếm trong tất cả các danh mục
        java.util.List<com.team4.quanliquanmicay.Entity.Product> allResults = new java.util.ArrayList<>();
        java.util.Map<String, java.util.List<com.team4.quanliquanmicay.Entity.Product>> resultsByCategory = new java.util.HashMap<>();
        
        // Tìm kiếm trong productCache và nhóm theo category
        for (com.team4.quanliquanmicay.Entity.Product product : productCache) {
            if (product.getProductName() != null && product.getProductName().toLowerCase().contains(searchText.toLowerCase())) {
                allResults.add(product);
                
                // Tìm tên category từ categoryId
                String categoryName = "";
                for (com.team4.quanliquanmicay.Entity.Category category : categoryCache) {
                    if (category.getCategory_id().equals(product.getCategoryId())) {
                        categoryName = category.getCategory_name();
                        break;
                    }
                }
                
                // Nhóm kết quả theo category
                if (!resultsByCategory.containsKey(categoryName)) {
                    resultsByCategory.put(categoryName, new java.util.ArrayList<>());
                }
                resultsByCategory.get(categoryName).add(product);
            }
        }

        // Hiển thị kết quả
        if (!allResults.isEmpty()) {
            // Nếu chỉ có 1 danh mục có kết quả, chuyển sang tab đó và chỉ hiển thị kết quả trong tab đó
            if (resultsByCategory.size() == 1) {
                String categoryName = resultsByCategory.keySet().iterator().next();
                // Tìm và chọn tab tương ứng
                for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                    if (jTabbedPane1.getTitleAt(i).equals(categoryName)) {
                        jTabbedPane1.setSelectedIndex(i);
                        // Chỉ hiển thị kết quả trong tab đã chọn
                        displaySearchResultsInSingleTab(allResults, categoryName);
                        break;
                    }
                }
            } else {
                // Nếu có nhiều danh mục có kết quả, hiển thị tất cả kết quả trong các tab tương ứng
                displaySearchResults(allResults);
            }
            lastSearchHadNoResult = false;
        } else {
            // Không tìm thấy kết quả
            lastSearchHadNoResult = true;
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Không tìm thấy món \"" + searchText + "\"", 
                "Kết quả tìm kiếm", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void displaySearchResultsInSingleTab(java.util.List<com.team4.quanliquanmicay.Entity.Product> results, String targetCategoryName) {
        // Hiển thị kết quả chỉ trong tab được chỉ định
        java.text.DecimalFormat vndFormat = new java.text.DecimalFormat("###,### VNĐ");
        
        // Tìm tab có tên category tương ứng
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            String tabTitle = jTabbedPane1.getTitleAt(i);
            if (tabTitle.equals(targetCategoryName)) {
                javax.swing.JScrollPane scrollPane = (javax.swing.JScrollPane) jTabbedPane1.getComponentAt(i);
                javax.swing.JTable table = (javax.swing.JTable) scrollPane.getViewport().getView();
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) table.getModel();
                
                // Xóa dữ liệu cũ trong table
                model.setRowCount(0);
                
                // Hiển thị kết quả tìm kiếm
                for (com.team4.quanliquanmicay.Entity.Product product : results) {
                    String discountStr = (product.getDiscount() > 0) ? ((int)Math.round(product.getDiscount() * 100)) + "%" : "0%";
                    String priceStr = vndFormat.format(product.getPrice());
                    model.addRow(new Object[]{
                        product.getProductId(),
                        product.getProductName(),
                        priceStr,
                        discountStr,
                        product.getUnit(),
                        product.isAvailable() ? "Còn bán" : "Ngừng bán"
                    });
                }
                break;
            }
        }
    }

    private void displaySearchResults(java.util.List<com.team4.quanliquanmicay.Entity.Product> results) {
        // Tạo map để nhóm kết quả theo category
        java.util.Map<String, java.util.List<com.team4.quanliquanmicay.Entity.Product>> resultsByCategory = new java.util.HashMap<>();
        
        // Nhóm kết quả theo category
        for (com.team4.quanliquanmicay.Entity.Product product : results) {
            String categoryName = "";
            for (com.team4.quanliquanmicay.Entity.Category category : categoryCache) {
                if (category.getCategory_id().equals(product.getCategoryId())) {
                    categoryName = category.getCategory_name();
                    break;
                }
            }
            
            if (!resultsByCategory.containsKey(categoryName)) {
                resultsByCategory.put(categoryName, new java.util.ArrayList<>());
            }
            resultsByCategory.get(categoryName).add(product);
        }
        
        // Hiển thị kết quả trong từng tab tương ứng
        java.text.DecimalFormat vndFormat = new java.text.DecimalFormat("###,### VNĐ");
        
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            String tabTitle = jTabbedPane1.getTitleAt(i);
            javax.swing.JScrollPane scrollPane = (javax.swing.JScrollPane) jTabbedPane1.getComponentAt(i);
            javax.swing.JTable table = (javax.swing.JTable) scrollPane.getViewport().getView();
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) table.getModel();
            
            // Xóa dữ liệu cũ trong table
            model.setRowCount(0);
            
            // Nếu tab này có kết quả tìm kiếm, hiển thị kết quả
            if (resultsByCategory.containsKey(tabTitle)) {
                for (com.team4.quanliquanmicay.Entity.Product product : resultsByCategory.get(tabTitle)) {
                    String discountStr = (product.getDiscount() > 0) ? ((int)Math.round(product.getDiscount() * 100)) + "%" : "0%";
                    String priceStr = vndFormat.format(product.getPrice());
                    model.addRow(new Object[]{
                        product.getProductId(),
                        product.getProductName(),
                        priceStr,
                        discountStr,
                        product.getUnit(),
                        product.isAvailable() ? "Còn bán" : "Ngừng bán"
                    });
                }
            }
        }
    }

    // ====== SETUP CHỌN ẢNH SẢN PHẨM ======
    private void setupImageSelection() {
        // Add mouse listener to lblImage for image selection
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 1) {
                    selectProductImage();
                }
            }
            
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                // Change cursor to hand when hovering
                lblImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                // Add tooltip
                lblImage.setToolTipText("Click để chọn ảnh sản phẩm");
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                // Reset cursor
                lblImage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            }
        });
        
        // Set border to indicate clickable area
        lblImage.setBorder(javax.swing.BorderFactory.createTitledBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 149, 237), 2),
            "Click để chọn ảnh",
            javax.swing.border.TitledBorder.CENTER,
            javax.swing.border.TitledBorder.BOTTOM,
            new java.awt.Font("Arial", java.awt.Font.ITALIC, 10),
            new java.awt.Color(100, 149, 237)
        ));
    }
    
    /**
     * ✅ IMAGE SELECTION: Open file chooser to select product image
     */
    private void selectProductImage() {
        try {
            // Create file chooser
            javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
            
            // Set file filter for images
            javax.swing.filechooser.FileNameExtensionFilter imageFilter = 
                new javax.swing.filechooser.FileNameExtensionFilter(
                    "Image Files (*.jpg, *.jpeg, *.png, *.gif)", 
                    "jpg", "jpeg", "png", "gif"
                );
            fileChooser.setFileFilter(imageFilter);
            fileChooser.setAcceptAllFileFilterUsed(false);
            
            // Set dialog title
            fileChooser.setDialogTitle("Chọn ảnh sản phẩm");
            
            // Set default directory (Desktop hoặc Pictures)
            try {
                java.io.File userHome = new java.io.File(System.getProperty("user.home"));
                java.io.File picturesDir = new java.io.File(userHome, "Pictures");
                if (picturesDir.exists()) {
                    fileChooser.setCurrentDirectory(picturesDir);
                } else {
                    java.io.File desktopDir = new java.io.File(userHome, "Desktop");
                    if (desktopDir.exists()) {
                        fileChooser.setCurrentDirectory(desktopDir);
                    }
                }
            } catch (Exception e) {
                // Use default directory
            }
            
            // Show dialog
            int result = fileChooser.showOpenDialog(this);
            
            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File selectedFile = fileChooser.getSelectedFile();
                
                // Validate file
                if (validateImageFile(selectedFile)) {
                    // Process and save image
                    String savedImageName = processSelectedImage(selectedFile);
                    
                    if (savedImageName != null) {
                        // Set current image name first
                        setCurrentImageName(savedImageName);
                        
                        // Force refresh the image display
                        java.awt.EventQueue.invokeLater(() -> {
                            fillProductImage(savedImageName);
                            lblImage.revalidate();
                            lblImage.repaint();
                        });
                        
                        // Show success message
                        XDialog.alert(
                            "✅ Đã chọn ảnh thành công!\n" +
                            "File: " + savedImageName,
                            "Thông báo"
                        );
                    }
                }
            }
            
        } catch (Exception e) {
            XDialog.alert(
                "❌ Lỗi khi chọn ảnh: " + e.getMessage(),
                "Lỗi"
            );
            e.printStackTrace();
        }
    }
    
    /**
     * ✅ VALIDATION: Validate selected image file
     */
    private boolean validateImageFile(java.io.File file) {
        try {
            // Check file exists
            if (file == null || !file.exists()) {
                XDialog.alert("File không tồn tại!", "Lỗi");
                return false;
            }
            
            // Check file size (max 5MB)
            long fileSizeInMB = file.length() / (1024 * 1024);
            if (fileSizeInMB > 5) {
                XDialog.alert(
                    "File ảnh quá lớn!\n" +
                    "Kích thước hiện tại: " + fileSizeInMB + "MB\n" +
                    "Kích thước tối đa: 5MB",
                    "Lỗi"
                );
                return false;
            }
            
            // Check file extension
            String fileName = file.getName().toLowerCase();
            if (!fileName.endsWith(".jpg") && !fileName.endsWith(".jpeg") && 
                !fileName.endsWith(".png") && !fileName.endsWith(".gif")) {
                XDialog.alert(
                    "Định dạng file không được hỗ trợ!\n" +
                    "Chỉ chấp nhận: .jpg, .jpeg, .png, .gif",
                    "Lỗi"
                );
                return false;
            }
            
            // Try to read as image
            java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(file);
            if (image == null) {
                XDialog.alert("File không phải là ảnh hợp lệ!", "Lỗi");
                return false;
            }
            
            return true;
            
        } catch (Exception e) {
            XDialog.alert("Lỗi kiểm tra file: " + e.getMessage(), "Lỗi");
            return false;
        }
    }
    
    /**
     * ✅ PROCESSING: Process and save selected image
     */
    private String processSelectedImage(java.io.File sourceFile) {
        try {
            // Generate unique filename
            String fileExtension = getFileExtension(sourceFile.getName());
            String timestamp = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new java.util.Date());
            String newFileName = "prod_" + timestamp + "." + fileExtension;
            
            // Create target directory in resources (for development)
            // Note: In production, you might want to save to external directory
            String resourcePath = "src/main/resources/icons_and_images/product/";
            java.io.File targetDir = new java.io.File(resourcePath);
            
            if (!targetDir.exists()) {
                boolean created = targetDir.mkdirs();
                if (!created) {
                    // Try alternative path
                    targetDir = new java.io.File("resources/icons_and_images/product/");
                    if (!targetDir.exists()) {
                        targetDir.mkdirs();
                    }
                }
            }
            
            // Target file
            java.io.File targetFile = new java.io.File(targetDir, newFileName);
            
            // Read and resize image if needed
            java.awt.image.BufferedImage originalImage = javax.imageio.ImageIO.read(sourceFile);
            java.awt.image.BufferedImage processedImage = resizeImageIfNeeded(originalImage);
            
            // Save processed image
            boolean saved = javax.imageio.ImageIO.write(processedImage, fileExtension, targetFile);
            
            if (!saved) {
                throw new Exception("Không thể lưu file ảnh");
            }
            
            // Verify file was created
            if (!targetFile.exists() || targetFile.length() == 0) {
                throw new Exception("File ảnh không được tạo thành công");
            }
            
            System.out.println("✅ Image saved successfully: " + targetFile.getAbsolutePath());
            
            return newFileName;
            
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi lưu ảnh: " + e.getMessage(), "Lỗi");
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * ✅ RESIZE: Resize image if too large (maintain aspect ratio)
     */
    private java.awt.image.BufferedImage resizeImageIfNeeded(java.awt.image.BufferedImage originalImage) {
        int maxWidth = 300;
        int maxHeight = 300;
        
        int originalWidth = originalImage.getWidth();
        int originalHeight = originalImage.getHeight();
        
        // Check if resize needed
        if (originalWidth <= maxWidth && originalHeight <= maxHeight) {
            return originalImage; // No resize needed
        }
        
        // Calculate new dimensions (maintain aspect ratio)
        double widthRatio = (double) maxWidth / originalWidth;
        double heightRatio = (double) maxHeight / originalHeight;
        double ratio = Math.min(widthRatio, heightRatio);
        
        int newWidth = (int) (originalWidth * ratio);
        int newHeight = (int) (originalHeight * ratio);
        
        // Create resized image
        java.awt.image.BufferedImage resizedImage = new java.awt.image.BufferedImage(
            newWidth, newHeight, java.awt.image.BufferedImage.TYPE_INT_RGB
        );
        
        java.awt.Graphics2D g2d = resizedImage.createGraphics();
        g2d.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, 
                            java.awt.RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.drawImage(originalImage, 0, 0, newWidth, newHeight, null);
        g2d.dispose();
        
        return resizedImage;
    }
    
    /**
     * ✅ OPTIMIZED: Get file extension
     */
    private String getFileExtension(String fileName) {
        return (fileName != null && fileName.contains(".")) ? 
            fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase() : "jpg";
    }
    
    /**
     * ✅ GET CURRENT IMAGE: Get current image name
     */
    private String getCurrentImageName() {
        return currentImageName;
    }
    
    /**
     * ✅ SET CURRENT IMAGE: Set current image name
     */
    private void setCurrentImageName(String imageName) {
        this.currentImageName = imageName;
    }
    
    /**
     * ✅ CAPTURE: Capture initial image label size
     */
    private void captureInitialImageSize() {
        try {
            // Wait for the component to be properly laid out
            java.awt.EventQueue.invokeLater(() -> {
                if (lblImage != null) {
                    originalImageSize = lblImage.getSize();
                    if (originalImageSize.width <= 0 || originalImageSize.height <= 0) {
                        // Fallback size if not properly initialized
                        originalImageSize = new java.awt.Dimension(204, 200);
                    }
                }
            });
        } catch (Exception e) {
            originalImageSize = new java.awt.Dimension(204, 200);
        }
    }
    
    /**
     * ✅ SET IMAGE WITH FIXED SIZE: Set image with controlled size
     */
    private void setImageWithFixedSize(String imagePath) {
        try {
            // Sử dụng kích thước cố định 200x200
            java.awt.Dimension fixedSize = new java.awt.Dimension(200, 200);
            
            // Load and scale image to fit the fixed label size
            java.net.URL imageURL = getClass().getResource(imagePath);
            if (imageURL != null) {
                javax.swing.ImageIcon originalIcon = new javax.swing.ImageIcon(imageURL);
                
                // ✅ VALIDATION: Check if image loaded successfully
                if (originalIcon.getIconWidth() > 0 && originalIcon.getIconHeight() > 0) {
                    // Scale image to fit the fixed size
                    java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(
                        fixedSize.width, 
                        fixedSize.height, 
                        java.awt.Image.SCALE_SMOOTH
                    );
                    
                    javax.swing.ImageIcon scaledIcon = new javax.swing.ImageIcon(scaledImage);
                    
                    // Set the scaled icon
                    lblImage.setIcon(scaledIcon);
                    lblImage.setText("");
                } else {
                    // Image không load được
                    lblImage.setIcon(null);
                    lblImage.setText("No Image");
                }
            } else {
                // Fallback to text if image not found
                lblImage.setIcon(null);
                lblImage.setText("No Image");
            }
            
            // ✅ ENFORCE: Luôn áp dụng kích thước cố định
            lblImage.setSize(fixedSize);
            lblImage.setPreferredSize(fixedSize);
            lblImage.setMinimumSize(fixedSize);
            lblImage.setMaximumSize(fixedSize);
            
        } catch (Exception e) {
            lblImage.setIcon(null);
            lblImage.setText("Error");
            
            // ✅ ENFORCE: Keep size even on error
            java.awt.Dimension fixedSize = new java.awt.Dimension(200, 200);
            lblImage.setSize(fixedSize);
            lblImage.setPreferredSize(fixedSize);
            lblImage.setMinimumSize(fixedSize);
            lblImage.setMaximumSize(fixedSize);
        }
    }
    
    // ====== FILL ẢNH SẢN PHẨM TƯƠNG TỰ NHÂN VIÊN ======
    private void fillProductImage(String imageName) {
        try {
            // Đảm bảo kích thước cố định trước khi load ảnh
            enforceFixedImageSize();
            
            System.out.println("🔍 fillProductImage called with: " + imageName);
            
            if (imageName != null && !imageName.trim().isEmpty()) {
                // Thử tìm ảnh trong các thư mục khác nhau
                String[] paths = {
                    "/icons_and_images/" + imageName,
                    "/icons_and_images/product/" + imageName,
                    "/icons_and_images/product/mi/" + imageName,
                    "/icons_and_images/product/drink/" + imageName,
                    "/icons_and_images/product/more/" + imageName
                };
                
                boolean found = false;
                for (String path : paths) {
                    System.out.println("🔍 Trying path: " + path);
                    java.net.URL imageURL = getClass().getResource(path);
                    if (imageURL != null) {
                        System.out.println("✅ Found image at: " + path);
                        setImageWithFixedSize(path);
                        found = true;
                        break;
                    }
                }
                
                if (!found) {
                    System.out.println("❌ Image not found in resources, trying external file");
                    // Thử tìm file trong thư mục resources external
                    if (tryLoadExternalImage(imageName)) {
                        found = true;
                    } else {
                        System.out.println("❌ External image not found, using default");
                        setImageWithFixedSize("/icons_and_images/Best.png");
                    }
                }
            } else {
                // Không có tên ảnh - dùng ảnh mặc định
                System.out.println("ℹ️ No image name provided, using default");
                setImageWithFixedSize("/icons_and_images/Best.png");
            }
            
            // Đảm bảo kích thước cố định sau khi load ảnh
            enforceFixedImageSize();
            
        } catch (Exception e) {
            System.out.println("❌ Error in fillProductImage: " + e.getMessage());
            e.printStackTrace();
            // Nếu lỗi, dùng ảnh unknown và vẫn giữ kích thước cố định
            setImageWithFixedSize("/icons_and_images/Unknown person.png");
            enforceFixedImageSize();
        }
    }
    
    /**
     * ✅ TRY LOAD EXTERNAL: Thử load ảnh từ file system
     */
    private boolean tryLoadExternalImage(String imageName) {
        try {
            // Thử các đường dẫn có thể có của file ảnh vừa lưu
            String[] externalPaths = {
                "src/main/resources/icons_and_images/product/" + imageName,
                "resources/icons_and_images/product/" + imageName,
                "src/main/resources/icons_and_images/" + imageName,
                "resources/icons_and_images/" + imageName
            };
            
            for (String path : externalPaths) {
                java.io.File imageFile = new java.io.File(path);
                System.out.println("🔍 Trying external path: " + imageFile.getAbsolutePath());
                
                if (imageFile.exists() && imageFile.canRead()) {
                    System.out.println("✅ Found external image: " + path);
                    
                    // Load image từ file system
                    java.awt.image.BufferedImage bufferedImage = javax.imageio.ImageIO.read(imageFile);
                    if (bufferedImage != null) {
                        // Scale và set image
                        java.awt.Image scaledImage = bufferedImage.getScaledInstance(200, 200, java.awt.Image.SCALE_SMOOTH);
                        javax.swing.ImageIcon scaledIcon = new javax.swing.ImageIcon(scaledImage);
                        
                        lblImage.setIcon(scaledIcon);
                        lblImage.setText("");
                        
                        return true;
                    }
                }
            }
            
            return false;
            
        } catch (Exception e) {
            System.out.println("❌ Error loading external image: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * ✅ ENFORCE: Đảm bảo kích thước cố định cho lblImage
     */
    private void enforceFixedImageSize() {
        java.awt.Dimension fixedSize = new java.awt.Dimension(200, 200);
        lblImage.setSize(fixedSize);
        lblImage.setPreferredSize(fixedSize);
        lblImage.setMinimumSize(fixedSize);
        lblImage.setMaximumSize(fixedSize);
        lblImage.revalidate();
        lblImage.repaint();
    }


}
