/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.team4.quanliquanmicay.View.management;

import com.team4.quanliquanmicay.DAO.BillDAO;
import com.team4.quanliquanmicay.DAO.PaymentHistoryDAO;
import com.team4.quanliquanmicay.DAO.UserDAO;
import com.team4.quanliquanmicay.Entity.Bill;
import com.team4.quanliquanmicay.Entity.PaymentHistory;
import com.team4.quanliquanmicay.Entity.UserAccount;
import com.team4.quanliquanmicay.Impl.BillDAOImpl;
import com.team4.quanliquanmicay.Impl.PaymentHistoryDAOImpl;
import com.team4.quanliquanmicay.Impl.UserDAOImpl;
import com.team4.quanliquanmicay.util.XChart;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ASUS
 */
public class TestJFreeChart extends javax.swing.JDialog {

    private JTabbedPane tabbedPane;
    private JPanel employeeChartPanel;
    private JPanel billChartPanel;
    private JPanel itemChartPanel;
    
    private BillDAO billDAO;
    private PaymentHistoryDAO paymentHistoryDAO;
    private UserDAO userDAO;

    /**
     * Creates new form TestJFreeChart
     */
    public TestJFreeChart(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initializeData();
        createCharts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Th·ªëng K√™ Doanh Thu - JFreeChart Demo");
        setPreferredSize(new Dimension(1200, 800));
        setResizable(true);
        
        // Initialize DAOs
        billDAO = new BillDAOImpl();
        paymentHistoryDAO = new PaymentHistoryDAOImpl();
        userDAO = new UserDAOImpl();
        
        // Create main layout
        setLayout(new BorderLayout());
        
        // Create header
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        // Create tabbed pane
        tabbedPane = new JTabbedPane();
        tabbedPane.setFont(new Font("Segoe UI", Font.BOLD, 14));
        
        // Create chart panels
        employeeChartPanel = new JPanel(new BorderLayout());
        billChartPanel = new JPanel(new BorderLayout());
        itemChartPanel = new JPanel(new BorderLayout());
        
        // Add tabs
        tabbedPane.addTab("Doanh Thu Theo Nh√¢n Vi√™n", null, employeeChartPanel);
        tabbedPane.addTab("Doanh Thu Theo Bill", null, billChartPanel);
        tabbedPane.addTab("Doanh Thu Theo M√≥n", null, itemChartPanel);
        
        add(tabbedPane, BorderLayout.CENTER);
        
        // Create footer
        JPanel footerPanel = createFooterPanel();
        add(footerPanel, BorderLayout.SOUTH);
        
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private JPanel createHeaderPanel() {
        JPanel panel = new JPanel();
        panel.setBackground(new Color(52, 73, 94));
        panel.setPreferredSize(new Dimension(1200, 80));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        
        JLabel titleLabel = new JLabel("üìä TH·ªêNG K√ä DOANH THU - JFreeChart Demo");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        panel.add(titleLabel);
        return panel;
    }
    
    private JPanel createFooterPanel() {
        JPanel panel = new JPanel();
        panel.setBackground(new Color(236, 240, 241));
        panel.setPreferredSize(new Dimension(1200, 50));
        panel.setBorder(BorderFactory.createEmptyBorder(5, 20, 5, 20));
        
        JLabel footerLabel = new JLabel("¬© 2024 - H·ªá th·ªëng qu·∫£n l√Ω qu√°n m√¨ cay - Ph√°t tri·ªÉn b·ªüi Team 4");
        footerLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        footerLabel.setForeground(new Color(52, 73, 94));
        
        panel.add(footerLabel);
        return panel;
    }
    
    private JPanel createTabIcon(Color color) {
        JPanel iconPanel = new JPanel();
        iconPanel.setPreferredSize(new Dimension(20, 20));
        iconPanel.setBackground(color);
        iconPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
        return iconPanel;
    }
    
    private void initializeData() {
        // Initialize DAOs if needed
        if (billDAO == null) billDAO = new BillDAOImpl();
        if (paymentHistoryDAO == null) paymentHistoryDAO = new PaymentHistoryDAOImpl();
        if (userDAO == null) userDAO = new UserDAOImpl();
    }
    
    private void createCharts() {
        // Create Employee Revenue Chart
        createEmployeeRevenueChart();
        
        // Create Bill Revenue Chart
        createBillRevenueChart();
        
        // Create Item Revenue Chart
        createItemRevenueChart();
    }
    
    private void createEmployeeRevenueChart() {
        try {
            // Get all payment history
            List<PaymentHistory> paymentHistories = paymentHistoryDAO.findAll();
            List<Bill> bills = billDAO.findAll();
            List<UserAccount> users = userDAO.findAll();
            
            // Create dataset for employee revenue
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            // Group revenue by employee
            Map<String, Double> employeeRevenue = new HashMap<>();
            
            // Check if we have real data
            boolean hasRealData = false;
            
            for (PaymentHistory ph : paymentHistories) {
                // Find the bill for this payment
                Bill bill = bills.stream()
                    .filter(b -> b.getBill_id() == ph.getPayment_history_id())
                    .findFirst()
                    .orElse(null);
                
                if (bill != null) {
                    // Find the employee for this bill
                    UserAccount employee = users.stream()
                        .filter(u -> u.getUser_id().equals(bill.getUser_id()))
                        .findFirst()
                        .orElse(null);
                    
                    if (employee != null) {
                        String employeeName = employee.getFullName();
                        double amount = ph.getTotal_amount();
                        
                        employeeRevenue.merge(employeeName, amount, Double::sum);
                        hasRealData = true;
                    }
                }
            }
            
            // If no real data, use sample data
            if (!hasRealData || employeeRevenue.isEmpty()) {
                employeeRevenue.put("Nguy·ªÖn VƒÉn An", 2500000.0);
                employeeRevenue.put("Tr·∫ßn Th·ªã B√¨nh", 1800000.0);
                employeeRevenue.put("L√™ VƒÉn C∆∞·ªùng", 1200000.0);
                employeeRevenue.put("Ph·∫°m Th·ªã Dung", 900000.0);
                employeeRevenue.put("Ho√†ng VƒÉn Em", 800000.0);
            }
            
            // Add data to dataset
            for (Map.Entry<String, Double> entry : employeeRevenue.entrySet()) {
                dataset.addValue(entry.getValue(), "Doanh Thu", entry.getKey());
            }
            
            // Create chart
            JFreeChart chart = XChart.createBarChart(
                "Th·ªëng K√™ Doanh Thu Theo Nh√¢n Vi√™n",
                "Nh√¢n Vi√™n",
                "Doanh Thu (VNƒê)",
                dataset
            );
            
            // Create chart panel
            ChartPanel chartPanel = XChart.createChartPanel(chart);
            chartPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            
            // Add to panel
            employeeChartPanel.removeAll();
            employeeChartPanel.add(chartPanel, BorderLayout.CENTER);
            
            // Add summary panel
            JPanel summaryPanel = createSummaryPanel(employeeRevenue, "T·ªïng doanh thu theo nh√¢n vi√™n");
            employeeChartPanel.add(summaryPanel, BorderLayout.SOUTH);
            
        } catch (Exception e) {
            e.printStackTrace();
            showErrorPanel(employeeChartPanel, "L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo nh√¢n vi√™n: " + e.getMessage());
        }
    }
    
    private void createBillRevenueChart() {
        try {
            // Get all payment history
            List<PaymentHistory> paymentHistories = paymentHistoryDAO.findAll();
            List<Bill> bills = billDAO.findAll();
            
            // Create dataset for bill revenue
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            // Group revenue by bill
            Map<String, Double> billRevenue = new HashMap<>();
            
            // Check if we have real data
            boolean hasRealData = false;
            
            for (PaymentHistory ph : paymentHistories) {
                Bill bill = bills.stream()
                    .filter(b -> b.getBill_id() == ph.getPayment_history_id())
                    .findFirst()
                    .orElse(null);
                
                if (bill != null) {
                    String billInfo = "Bill #" + bill.getBill_id() + " - " + bill.getCheckin();
                    double amount = ph.getTotal_amount();
                    
                    billRevenue.merge(billInfo, amount, Double::sum);
                    hasRealData = true;
                }
            }
            
            // If no real data, use sample data
            if (!hasRealData || billRevenue.isEmpty()) {
                billRevenue.put("Bill #001 - 2024-01-15", 850000.0);
                billRevenue.put("Bill #002 - 2024-01-16", 650000.0);
                billRevenue.put("Bill #003 - 2024-01-17", 1200000.0);
                billRevenue.put("Bill #004 - 2024-01-18", 450000.0);
                billRevenue.put("Bill #005 - 2024-01-19", 950000.0);
                billRevenue.put("Bill #006 - 2024-01-20", 750000.0);
                billRevenue.put("Bill #007 - 2024-01-21", 1100000.0);
                billRevenue.put("Bill #008 - 2024-01-22", 550000.0);
                billRevenue.put("Bill #009 - 2024-01-23", 800000.0);
                billRevenue.put("Bill #010 - 2024-01-24", 680000.0);
            }
            
            // Add data to dataset (limit to top 10 bills for readability)
            billRevenue.entrySet().stream()
                .sorted((e1, e2) -> Double.compare(e2.getValue(), e1.getValue()))
                .limit(10)
                .forEach(entry -> dataset.addValue(entry.getValue(), "Doanh Thu", entry.getKey()));
            
            // Create chart
            JFreeChart chart = XChart.createBarChart(
                "Th·ªëng K√™ Doanh Thu Theo Bill (Top 10)",
                "Bill",
                "Doanh Thu (VNƒê)",
                dataset
            );
            
            // Create chart panel
            ChartPanel chartPanel = XChart.createChartPanel(chart);
            chartPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            
            // Add to panel
            billChartPanel.removeAll();
            billChartPanel.add(chartPanel, BorderLayout.CENTER);
            
            // Add summary panel
            JPanel summaryPanel = createSummaryPanel(billRevenue, "T·ªïng doanh thu theo bill");
            billChartPanel.add(summaryPanel, BorderLayout.SOUTH);
            
        } catch (Exception e) {
            e.printStackTrace();
            showErrorPanel(billChartPanel, "L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo bill: " + e.getMessage());
        }
    }
    
    private void createItemRevenueChart() {
        try {
            // Get all bills
            List<Bill> bills = billDAO.findAll();
            
            // Create dataset for item revenue (simulated data since we don't have item details)
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            // Simulate item revenue data (in real scenario, this would come from bill items)
            Map<String, Double> itemRevenue = new HashMap<>();
            itemRevenue.put("M√¨ cay H√†n Qu·ªëc", 2500000.0);
            itemRevenue.put("M√¨ cay Trung Qu·ªëc", 1800000.0);
            itemRevenue.put("M√¨ cay Th√°i Lan", 1200000.0);
            itemRevenue.put("M√¨ cay Vi·ªát Nam", 900000.0);
            itemRevenue.put("M√¨ cay Nh·∫≠t B·∫£n", 800000.0);
            itemRevenue.put("M√¨ cay Singapore", 600000.0);
            itemRevenue.put("M√¨ cay Malaysia", 500000.0);
            itemRevenue.put("M√¨ cay Indonesia", 400000.0);
            
            // Add data to dataset
            for (Map.Entry<String, Double> entry : itemRevenue.entrySet()) {
                dataset.addValue(entry.getValue(), "Doanh Thu", entry.getKey());
            }
            
            // Create pie chart for items with percentage labels
            DefaultPieDataset pieDataset = new DefaultPieDataset();
            double totalRevenue = itemRevenue.values().stream().mapToDouble(Double::doubleValue).sum();
            
            for (Map.Entry<String, Double> entry : itemRevenue.entrySet()) {
                double percentage = (entry.getValue() / totalRevenue) * 100;
                String label = entry.getKey() + " (" + String.format("%.1f", percentage) + "%)";
                pieDataset.setValue(label, entry.getValue());
            }
            
            JFreeChart chart = XChart.createPieChart(
                "Th·ªëng K√™ Doanh Thu Theo M√≥n",
                pieDataset
            );
            
            // Create chart panel
            ChartPanel chartPanel = XChart.createChartPanel(chart);
            chartPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            
            // Add to panel
            itemChartPanel.removeAll();
            itemChartPanel.add(chartPanel, BorderLayout.CENTER);
            
            // Add summary panel
            JPanel summaryPanel = createSummaryPanel(itemRevenue, "T·ªïng doanh thu theo m√≥n");
            itemChartPanel.add(summaryPanel, BorderLayout.SOUTH);
            
        } catch (Exception e) {
            e.printStackTrace();
            showErrorPanel(itemChartPanel, "L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo m√≥n: " + e.getMessage());
        }
    }
    
    private JPanel createSummaryPanel(Map<String, Double> data, String title) {
        JPanel panel = new JPanel(new GridLayout(2, 1));
        panel.setBackground(new Color(236, 240, 241));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        
        // Title
        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        titleLabel.setForeground(new Color(52, 73, 94));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Summary info
        double totalRevenue = data.values().stream().mapToDouble(Double::doubleValue).sum();
        int totalItems = data.size();
        
        JLabel summaryLabel = new JLabel(String.format("T·ªïng c·ªông: %d m·ª•c - T·ªïng doanh thu: %.0f VNƒê", 
            totalItems, totalRevenue));
        summaryLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        summaryLabel.setForeground(new Color(52, 73, 94));
        summaryLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        panel.add(titleLabel);
        panel.add(summaryLabel);
        
        return panel;
    }
    
    private void showErrorPanel(JPanel targetPanel, String errorMessage) {
        targetPanel.removeAll();
        targetPanel.setLayout(new BorderLayout());
        
        JLabel errorLabel = new JLabel("‚ùå " + errorMessage);
        errorLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        errorLabel.setForeground(Color.RED);
        errorLabel.setHorizontalAlignment(SwingConstants.CENTER);
        errorLabel.setBorder(BorderFactory.createEmptyBorder(50, 20, 50, 20));
        
        targetPanel.add(errorLabel, BorderLayout.CENTER);
        targetPanel.revalidate();
        targetPanel.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestJFreeChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestJFreeChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestJFreeChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestJFreeChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TestJFreeChart dialog = new TestJFreeChart(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
