/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View.management;

import com.team4.quanliquanmicay.Controller.CategoryController;
import com.team4.quanliquanmicay.Entity.Category;
import com.team4.quanliquanmicay.Impl.CategoryDAOImpl;
import com.team4.quanliquanmicay.DAO.CategoryDAO;
import com.team4.quanliquanmicay.util.XTheme;
import com.team4.quanliquanmicay.util.XDialog;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class CategoryManagement extends javax.swing.JFrame implements CategoryController{

    private CategoryDAO categoryDAO = new CategoryDAOImpl();

    /**
     * Creates new form DoanhThuJDialog
     */
    public CategoryManagement() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        this.setLocationRelativeTo(null);
        
        // Tắt khả năng di chuyển cột và edit
        disableTableEditing();
    }
    
    /**
     * Tắt khả năng edit và di chuyển cột trong table
     */
    private void disableTableEditing() {
        // Tắt khả năng di chuyển cột
        tblCategories.getTableHeader().setReorderingAllowed(false);
        
        // Tắt khả năng edit
        tblCategories.setDefaultEditor(Object.class, null);
        
        // Vô hiệu hóa editor cho từng cột
        for (int i = 0; i < tblCategories.getColumnCount(); i++) {
            tblCategories.getColumnModel().getColumn(i).setCellEditor(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEnabled = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCateId = new javax.swing.JTextField();
        txtCateName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        radActive = new javax.swing.JRadioButton();
        radInactive = new javax.swing.JRadioButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 51, 51));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(134, 39, 43));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Quản Lí Loại Món");

        jPanel2.setBackground(new java.awt.Color(204, 164, 133));

        jPanel3.setBackground(new java.awt.Color(204, 164, 133));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Mã loại :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Tên loại :");

        txtCateId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCateId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCateIdActionPerformed(evt);
            }
        });

        txtCateName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnAdd.setBackground(new java.awt.Color(183, 239, 197));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 153, 0));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/add.png"))); // NOI18N
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 231, 153));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(0, 102, 51));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/edit.png"))); // NOI18N
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(164, 216, 255));
        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(102, 102, 102));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/refresh.png"))); // NOI18N
        btnReset.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Trạng thái :");

        btnEnabled.add(radActive);
        radActive.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        radActive.setForeground(new java.awt.Color(255, 255, 255));
        radActive.setText("Hoạt động");

        radInactive.setBackground(new java.awt.Color(204, 164, 133));
        btnEnabled.add(radInactive);
        radInactive.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        radInactive.setForeground(new java.awt.Color(255, 255, 255));
        radInactive.setText("Ngừng hoạt động");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(radActive)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radInactive))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCateName)
                                .addComponent(txtCateId, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCateId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(radActive)
                    .addComponent(radInactive))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
        );

        btnExit.setBackground(new java.awt.Color(119, 50, 5));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setForeground(new java.awt.Color(102, 102, 102));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/Log out.png"))); // NOI18N
        btnExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        tblCategories.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã loại", "Tên loại", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);
        if (tblCategories.getColumnModel().getColumnCount() > 0) {
            tblCategories.getColumnModel().getColumn(0).setResizable(false);
            tblCategories.getColumnModel().getColumn(1).setResizable(false);
            tblCategories.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(266, 266, 266))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        create();
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtCateIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCateIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCateIdActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        open();
    }//GEN-LAST:event_formWindowOpened

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Kiểm tra xem có dữ liệu trên form không
        String categoryId = txtCateId.getText().trim();
        String categoryName = txtCateName.getText().trim();
        
        if (!categoryId.isEmpty() || !categoryName.isEmpty()) {
            String message = "Bạn có dữ liệu chưa lưu trên form:\n\n" +
                           "• Mã loại: " + (categoryId.isEmpty() ? "(trống)" : categoryId) + "\n" +
                           "• Tên loại: " + (categoryName.isEmpty() ? "(trống)" : categoryName) + "\n" +
                           "• Trạng thái: " + (radActive.isSelected() ? "Hoạt động" : 
                                               radInactive.isSelected() ? "Ngừng hoạt động" : "(chưa chọn)") + "\n\n" +
                           "Bạn có muốn:\n" +
                           "• Hủy bỏ dữ liệu và thoát\n" +
                           "• Tiếp tục chỉnh sửa";
            
            String[] options = {"Hủy bỏ và thoát", "Tiếp tục chỉnh sửa"};
            String choice = XDialog.selection(message, "Xác nhận thoát", options);
            
            if ("Hủy bỏ và thoát".equals(choice)) {
                System.exit(0);
            }
            // Nếu chọn "Tiếp tục chỉnh sửa" thì không làm gì cả
        } else {
            // Không có dữ liệu, thoát bình thường
            if (XDialog.confirm("Bạn có chắc chắn muốn thoát?", "Xác nhận thoát")) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        edit();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CategoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CategoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CategoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CategoryManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CategoryManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.ButtonGroup btnEnabled;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radActive;
    private javax.swing.JRadioButton radInactive;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTextField txtCateId;
    private javax.swing.JTextField txtCateName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        fillToTable();
    }

    @Override
    public void setForm(Category entity) {
        txtCateId.setText(entity.getCategory_id());
        txtCateName.setText(entity.getCategory_name());
        if (entity.getIs_available() == 1) {
            radActive.setSelected(true);
            radInactive.setSelected(false);
        } else {
            radActive.setSelected(false);
            radInactive.setSelected(true);
        }
    }

    @Override
    public Category getForm() {
        Category category = new Category();
        category.setCategory_id(txtCateId.getText());
        category.setCategory_name(txtCateName.getText());
        if (radActive.isSelected()) {
            category.setIs_available(1);
        } else {
            category.setIs_available(0);
        }
        return category;
    }

    @Override
    public void fillToTable() {
        List<Category> categories = categoryDAO.findAll();
        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            categories.stream().map(category -> new Object[] {
                category.getCategory_id(),
                category.getCategory_name(),
                category.getIs_available() == 1 ? "Hoạt động" : "Ngừng hoạt động"
            }).toArray(Object[][]::new),
            new String[] { "Mã loại", "Tên loại", "Trạng thái" }
        ) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Không cho phép edit bất kỳ cột nào
            }
        });
        
        // Áp dụng lại cấu hình tắt edit sau khi set model
        disableTableEditing();
    }

    @Override
    public void edit() {
        int selectedRow = tblCategories.getSelectedRow();
        if (selectedRow >= 0) {
            String categoryId = tblCategories.getValueAt(selectedRow, 0).toString();
            String categoryName = tblCategories.getValueAt(selectedRow, 1).toString();
            String status = tblCategories.getValueAt(selectedRow, 2).toString();
            int isAvailable = status.equals("Hoạt động") ? 1 : 0;
            Category category = new Category(categoryId, categoryName, isAvailable);
            System.out.println("[SELECT] Chọn dòng: " + category);
            setForm(category);
            setEditable(true);
            txtCateId.setEditable(false); // Disable mã loại khi chọn dòng
            btnUpdate.setEnabled(true);
            btnReset.setEnabled(true);
            btnExit.setEnabled(true);
        }
    }

    /**
     * Tạo chuỗi thông tin để hiển thị trong dialog
     */
    private String formatCategoryInfo(Category category) {
        return String.format("Mã loại: %s\nTên loại: %s\nTrạng thái: %s", 
            category.getCategory_id(), 
            category.getCategory_name(), 
            category.getIs_available() == 1 ? "Hoạt động" : "Ngừng hoạt động");
    }
    
    /**
     * Kiểm tra dữ liệu rỗng và trả về thông báo lỗi
     */
    private String validateFormData() {
        StringBuilder errorMessage = new StringBuilder();
        boolean hasError = false;
        
        // Kiểm tra mã loại
        String categoryId = txtCateId.getText().trim();
        if (categoryId.isEmpty()) {
            errorMessage.append("• Mã loại không được để trống\n");
            hasError = true;
        }
        
        // Kiểm tra tên loại
        String categoryName = txtCateName.getText().trim();
        if (categoryName.isEmpty()) {
            errorMessage.append("• Tên loại không được để trống\n");
            hasError = true;
        }
        
        // Kiểm tra trạng thái
        if (!radActive.isSelected() && !radInactive.isSelected()) {
            errorMessage.append("• Vui lòng chọn trạng thái\n");
            hasError = true;
        }
        
        if (hasError) {
            return "Vui lòng kiểm tra và sửa các lỗi sau:\n\n" + errorMessage.toString();
        }
        
        return null; // Không có lỗi
    }

    @Override
    public void create() {
        // Kiểm tra dữ liệu rỗng
        String validationError = validateFormData();
        if (validationError != null) {
            XDialog.error(validationError, "Lỗi nhập liệu");
            return;
        }
        
        Category category = getForm();
        
        // Kiểm tra trùng mã loại
        if (categoryDAO.findAll().stream().anyMatch(c -> c.getCategory_id().equals(category.getCategory_id()))) {
            XDialog.error("Mã loại '" + category.getCategory_id() + "' đã tồn tại!\nVui lòng nhập mã khác.", "Dữ liệu đã tồn tại");
            txtCateId.requestFocus();
            return;
        }
        
        // Hiển thị dialog xác nhận với thông tin chi tiết
        String message = "Bạn có chắc chắn muốn thêm loại món mới?\n\n" +
                        "THÔNG TIN SẼ THÊM:\n" + formatCategoryInfo(category);
        
        if (XDialog.confirm(message, "Xác nhận thêm mới")) {
            try {
                categoryDAO.create(category);
                fillToTable();
                clear();
                XDialog.success("Thêm loại món thành công!");
            } catch (Exception e) {
                e.printStackTrace();
                XDialog.error("Lỗi: " + e.getMessage(), "Thêm mới thất bại");
            }
        }
    }

    @Override
    public void update() {
        int selectedRow = tblCategories.getSelectedRow();
        if (selectedRow < 0) {
            XDialog.error("Vui lòng chọn một loại món để cập nhật!", "Chưa chọn dòng");
            return;
        }
        
        // Kiểm tra dữ liệu rỗng
        String validationError = validateFormData();
        if (validationError != null) {
            XDialog.error(validationError, "Lỗi nhập liệu");
            return;
        }
        
        // Lấy thông tin cũ từ table
        String oldCategoryId = tblCategories.getValueAt(selectedRow, 0).toString();
        String oldCategoryName = tblCategories.getValueAt(selectedRow, 1).toString();
        String oldStatus = tblCategories.getValueAt(selectedRow, 2).toString();
        int oldIsAvailable = oldStatus.equals("Hoạt động") ? 1 : 0;
        
        Category oldCategory = new Category(oldCategoryId, oldCategoryName, oldIsAvailable);
        Category newCategory = getForm();
        
        // Kiểm tra xem có thay đổi gì không
        if (oldCategory.getCategory_name().equals(newCategory.getCategory_name()) && 
            oldCategory.getIs_available() == newCategory.getIs_available()) {
            XDialog.alert("Không có thay đổi nào được thực hiện.", "Không có thay đổi");
            return;
        }
        
        // Hiển thị dialog xác nhận với thông tin so sánh
        String message = "Bạn có muốn cập nhật thông tin loại món?\n\n" +
                        "THÔNG TIN HIỆN TẠI:\n" + formatCategoryInfo(oldCategory) + "\n\n" +
                        "THÔNG TIN MỚI:\n" + formatCategoryInfo(newCategory);
        
        if (XDialog.confirm(message, "Xác nhận cập nhật")) {
            try {
                categoryDAO.update(newCategory);
                fillToTable();
                clear();
                XDialog.success("Cập nhật loại món thành công!");
            } catch (Exception e) {
                e.printStackTrace();
                XDialog.error("Lỗi: " + e.getMessage(), "Cập nhật thất bại");
            }
        }
    }

    @Override
    public void delete() {
        int selectedRow = tblCategories.getSelectedRow();
        if (selectedRow < 0) {
            XDialog.error("Vui lòng chọn một loại món để xóa!", "Chưa chọn dòng");
            return;
        }
        
        // Lấy thông tin để hiển thị
        String categoryId = tblCategories.getValueAt(selectedRow, 0).toString();
        String categoryName = tblCategories.getValueAt(selectedRow, 1).toString();
        String status = tblCategories.getValueAt(selectedRow, 2).toString();
        int isAvailable = status.equals("Hoạt động") ? 1 : 0;
        
        Category toDelete = new Category(categoryId, categoryName, isAvailable);
        
        // Hiển thị dialog xác nhận với thông tin chi tiết
        String message = "Bạn có chắc chắn muốn xóa loại món này?\n\n" +
                        "THÔNG TIN SẼ BỊ XÓA:\n" + formatCategoryInfo(toDelete);
        
        if (XDialog.confirm(message, "Xác nhận xóa")) {
            try {
                categoryDAO.deleteById(categoryId);
                clear();
                fillToTable();
                XDialog.success("Xóa loại món thành công!");
            } catch (Exception e) {
                e.printStackTrace();
                // Kiểm tra lỗi ràng buộc khóa ngoại
                if (e.getMessage() != null && e.getMessage().contains("FK_PRODUCT_CATEGORY")) {
                    XDialog.error("Không thể xóa loại món này vì liên quan đến nhiều thông tin khác!", "Lỗi ràng buộc");
                } else {
                    XDialog.error("Lỗi: " + e.getMessage(), "Xóa thất bại");
                }
            }
        }
    }

    @Override
    public void clear() {
        // Kiểm tra xem có dữ liệu trên form không
        String categoryId = txtCateId.getText().trim();
        String categoryName = txtCateName.getText().trim();
        
        if (!categoryId.isEmpty() || !categoryName.isEmpty()) {
            String message = "Bạn có chắc chắn muốn làm mới form?\n\n" +
                           "Dữ liệu hiện tại trên form:\n" +
                           "• Mã loại: " + (categoryId.isEmpty() ? "(trống)" : categoryId) + "\n" +
                           "• Tên loại: " + (categoryName.isEmpty() ? "(trống)" : categoryName) + "\n" +
                           "• Trạng thái: " + (radActive.isSelected() ? "Hoạt động" : 
                                               radInactive.isSelected() ? "Ngừng hoạt động" : "(chưa chọn)") + "\n\n" +
                           "Tất cả dữ liệu sẽ bị mất.";
            
            if (XDialog.confirm(message, "Xác nhận làm mới")) {
                txtCateId.setText("");
                txtCateName.setText("");
                radActive.setSelected(true);
                txtCateId.setEditable(true);
                tblCategories.clearSelection();
                XDialog.success("Đã làm mới form thành công!");
            }
        } else {
            // Form đã trống, chỉ cần reset
            txtCateId.setText("");
            txtCateName.setText("");
            radActive.setSelected(true);
            txtCateId.setEditable(true);
            tblCategories.clearSelection();
        }
    }

    @Override
    public void setEditable(boolean editable) {
        txtCateId.setEditable(!editable);
        txtCateName.setEditable(editable);
        radActive.setEnabled(editable);
        radInactive.setEnabled(editable);

        btnAdd.setEnabled(editable);
        btnUpdate.setEnabled(editable);
        btnReset.setEnabled(editable);
        btnExit.setEnabled(editable);
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
