/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View.management;

import com.team4.quanliquanmicay.Controller.TableController;
import com.team4.quanliquanmicay.DAO.TableForCustomerDAO;
import com.team4.quanliquanmicay.Entity.TableForCustomer;
import com.team4.quanliquanmicay.Impl.TableForCustomerDAOImpl;
import com.team4.quanliquanmicay.util.XTheme;
import com.team4.quanliquanmicay.util.XDialog;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.border.LineBorder;
import javax.swing.border.CompoundBorder;
import javax.swing.ButtonModel;

/**
 *
 * @author HP
 */
public class TableManagement extends javax.swing.JFrame implements TableController {

    /**
     * Creates new form BanJDialog
     */
    
    public TableManagement() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        this.setLocationRelativeTo(null); 
        this.tableDAO = new TableForCustomerDAOImpl();
        pnlNormalTable.setLayout(new java.awt.GridLayout(2, 6, 15, 15)); // 3 hàng 4 cột
        pnlVipTable.setLayout(new java.awt.GridLayout(2, 6, 15, 15));    // 2 hàng 6 cột
        jTabbedPane1.setSelectedIndex(0); // Luôn hiển thị tab Normal Table trước
        
        // Áp dụng hiệu ứng mouse press cho tất cả button
        applyMousePressEffectToAllButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pnlTable = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlNormalTable = new javax.swing.JPanel();
        pnlVipTable = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblTable_Number = new javax.swing.JLabel();
        lblTable_Status = new javax.swing.JLabel();
        lblAmount1 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        cboTable_Status = new javax.swing.JComboBox<>();
        txtTable_Number = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/icon/refresh.png"))); // NOI18N
        jButton5.setText("THÊM");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(134, 39, 43));

        lblTitle.setBackground(new java.awt.Color(102, 0, 0));
        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("QUẢN LÍ BÀN");

        jPanel2.setBackground(new java.awt.Color(204, 164, 133));

        pnlTable.setBackground(new java.awt.Color(204, 164, 133));

        jTabbedPane1.setBackground(new java.awt.Color(204, 164, 133));
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        pnlNormalTable.setBackground(new java.awt.Color(255, 255, 255));
        pnlNormalTable.setPreferredSize(new java.awt.Dimension(1180, 479));
        pnlNormalTable.setRequestFocusEnabled(false);

        javax.swing.GroupLayout pnlNormalTableLayout = new javax.swing.GroupLayout(pnlNormalTable);
        pnlNormalTable.setLayout(pnlNormalTableLayout);
        pnlNormalTableLayout.setHorizontalGroup(
            pnlNormalTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
        );
        pnlNormalTableLayout.setVerticalGroup(
            pnlNormalTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("1-12", pnlNormalTable);

        pnlVipTable.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlVipTableLayout = new javax.swing.GroupLayout(pnlVipTable);
        pnlVipTable.setLayout(pnlVipTableLayout);
        pnlVipTableLayout.setHorizontalGroup(
            pnlVipTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
        );
        pnlVipTableLayout.setVerticalGroup(
            pnlVipTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("13-24", pnlVipTable);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(204, 164, 133));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        lblTable_Number.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTable_Number.setForeground(new java.awt.Color(255, 255, 255));
        lblTable_Number.setText("BÀN SỐ :");

        lblTable_Status.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTable_Status.setForeground(new java.awt.Color(255, 255, 255));
        lblTable_Status.setText("TRẠNG THÁI :");

        lblAmount1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAmount1.setForeground(new java.awt.Color(255, 255, 255));
        lblAmount1.setText("SỐ CHỖ NGỒI :");

        txtAmount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        cboTable_Status.setEditable(true);
        cboTable_Status.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTable_Status.setForeground(new java.awt.Color(204, 204, 204));
        cboTable_Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trống", "Đang Phục Vụ", "Không hoạt động" }));

        txtTable_Number.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnAdd.setBackground(new java.awt.Color(185, 163, 147));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(185, 163, 147));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Cập nhật");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(185, 163, 147));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Làm mới");
        btnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(185, 163, 147));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(185, 163, 147));
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Thoát");
        btnExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTable_Status)
                    .addComponent(lblTable_Number)
                    .addComponent(lblAmount1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cboTable_Status, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTable_Number, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAmount))
                .addGap(31, 31, 31)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTable_Number)
                    .addComponent(txtTable_Number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTable_Status)
                    .addComponent(cboTable_Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAmount1))
                .addGap(86, 86, 86))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(282, 282, 282))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // COMMENT: Xóa bàn
        // delete();
        
        // THAY THẾ BẰNG THÔNG BÁO
        XDialog.alert("Tính năng đang được phát triển!", "Thông báo");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Hỏi xác nhận trước khi làm mới
        if (XDialog.confirm("Bạn có chắc chắn muốn làm mới tất cả thông tin không?", "Xác nhận làm mới")) {
            // Làm mới form
            clear();
        }
        // Nếu chọn "Không" thì không làm gì cả
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Hỏi xác nhận trước khi thoát
        if (XDialog.confirm("Bạn có chắc chắn muốn thoát khỏi ứng dụng không?", "Xác nhận thoát")) {
          this.dispose();
        }
        // Nếu chọn "Không" thì không làm gì cả
    }//GEN-LAST:event_btnExitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Load bàn khi mở form
        loadTable();
        
        // Fill thông tin bàn đầu tiên lên form
        fillFirstTableToForm();
    }//GEN-LAST:event_formWindowOpened

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // COMMENT: Thêm bàn mới
        // create();
        
        // THAY THẾ BẰNG THÔNG BÁO
        XDialog.alert("Tính năng đang được phát triển!", "Thông báo");
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // Cập nhật bàn
       this. update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */ 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (Exception e) {}
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboTable_Status;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAmount1;
    private javax.swing.JLabel lblTable_Number;
    private javax.swing.JLabel lblTable_Status;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlNormalTable;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JPanel pnlVipTable;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtTable_Number;
    // End of variables declaration//GEN-END:variables

    private TableForCustomerDAO tableDAO;

    // Thêm biến này vào class TableManagement
    private JButton selectedButton = null;
    private int selectedTableNumber = -1;
    // Thêm flag để tránh xử lý nhiều sự kiện đồng thời
    private boolean isProcessingSelection = false;

    // Thêm phương thức mới để fill bàn đầu tiên lên form
    private void fillFirstTableToForm() {
        try {
            List<TableForCustomer> tables = tableDAO.findAll();
            if (tables != null && !tables.isEmpty()) {
                // Lấy bàn đầu tiên từ database
                TableForCustomer firstTable = tables.get(0);
                
                // Fill thông tin lên form
                setForm(firstTable);
                
                System.out.println("Đã fill thông tin bàn đầu tiên: Bàn số " + firstTable.getTable_number());
            } else {
                System.out.println("Không có bàn nào trong database");
            }
        } catch (Exception e) {
            System.err.println("Lỗi khi load bàn đầu tiên: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Cập nhật phương thức loadTable để không tự động tạo bàn mới
    private void loadTable() {
        List<TableForCustomer> tables = tableDAO.findAll();
        
        // Xóa tất cả bàn cũ trong panel
        pnlNormalTable.removeAll();
        pnlVipTable.removeAll();
        
        // Tạo map để tra cứu nhanh
        java.util.Map<Integer, TableForCustomer> tableMap = new java.util.HashMap<>();
        for (TableForCustomer t : tables) {
            tableMap.put(t.getTable_number(), t);
        }

        // 1-12: Normal
        for (int i = 1; i <= 12; i++) {
            TableForCustomer table = tableMap.get(i);
            pnlNormalTable.add(this.createButton(i, table));
        }

        // 13-24: VIP
        for (int i = 13; i <= 24; i++) {
            TableForCustomer table = tableMap.get(i);
            pnlVipTable.add(this.createButton(i, table));
        }
        
        // Cập nhật giao diện
        pnlNormalTable.revalidate();
        pnlNormalTable.repaint();
        pnlVipTable.revalidate();
        pnlVipTable.repaint();
    }

    // Thêm phương thức helper để tìm bàn theo số
    private TableForCustomer findTableByNumber(List<TableForCustomer> tables, int tableNumber) {
        for (TableForCustomer table : tables) {
            if (table.getTable_number() == tableNumber) {
                return table;
            }
        }
        return null;
    }

    // Thêm phương thức kiểm tra bàn tồn tại
    private boolean isTableExists(int tableNumber) {
        try {
            TableForCustomer table = tableDAO.findById(tableNumber);
            return table != null;
        } catch (Exception e) {
            return false;
        }
    }

    // Hàm lấy màu đậm khi chọn
    private Color getBaseColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#CCCCCC"); // Trống - xám nhạt
            case 1: return Color.decode("#D6F5D6"); // Đang phục vụ - xanh nhạt
            case 2: return Color.decode("#FFCCCC"); // Ngưng hoạt động - đỏ nhạt
            default: return Color.GRAY;
        }
    }
    
    private Color brightenColor(Color color, float factor) {
        int r = Math.min(255, (int)(color.getRed() + (255 - color.getRed()) * factor));
        int g = Math.min(255, (int)(color.getGreen() + (255 - color.getGreen()) * factor));
        int b = Math.min(255, (int)(color.getBlue() + (255 - color.getBlue()) * factor));
        return new Color(r, g, b);
    }
    
    private Color darkenColor(Color color, float factor) {
        int r = Math.max(0, (int)(color.getRed() * (1 - factor)));
        int g = Math.max(0, (int)(color.getGreen() * (1 - factor)));
        int b = Math.max(0, (int)(color.getBlue() * (1 - factor)));
        return new Color(r, g, b);
    }
    
    // Hover: làm sáng 15%
    private Color getHoverColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#999999"); // Trống - xám đậm hơn
            case 1: return Color.decode("#ADEBAD"); // Đang phục vụ - xanh đậm hơn
            case 2: return Color.decode("#990000"); // Ngưng hoạt động - đỏ đậm
            default: return Color.GRAY;
        }
    }
    
    // Chọn: làm tối 20%
    private Color getSelectedColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#666666"); // Trống - xám đậm nhất
            case 1: return Color.decode("#85E085"); // Đang phục vụ - xanh đậm nhất
            case 2: return Color.decode("#660000"); // Ngưng hoạt động - đỏ đậm pha nâu
            default: return Color.GRAY;
        }
    }
    
    // Nhấn chuột: làm tối 30% (tạm thời)
    private Color getPressedColorByStatus(int status) {
        return darkenColor(getBaseColorByStatus(status), 0.30f);
    }

    // Thêm hàm helper để thêm hiệu ứng mouse press cho button sử dụng ButtonModel
    private void addMousePressEffect(JButton button) {
        // Giữ màu nền nhưng tắt hiệu ứng mặc định
        button.setOpaque(true);
        button.setContentAreaFilled(true);
        button.setFocusPainted(false);
        button.setRolloverEnabled(false);
        button.setFocusable(false);
        button.setRequestFocusEnabled(false);
        
        Color originalColor = button.getBackground();
        
        // Sử dụng ButtonModel để xử lý hiệu ứng pressed
        button.getModel().addChangeListener(e -> {
            ButtonModel model = button.getModel();
            if (model.isPressed()) {
                button.setBackground(Color.PINK); // màu khi bấm giữ
            } else {
                button.setBackground(originalColor); // trở lại màu gốc
            }
        });
        
        // Áp dụng hiệu ứng hover từ XTheme
 
    }

    // Sửa lại createButton để sử dụng hiệu ứng hover từ XTheme
    private JButton createButton(int tableNumber, TableForCustomer table) {
        JButton btnTable = new JButton();
        
        // Thiết lập thuộc tính cơ bản
        btnTable.setOpaque(true);             // Cho phép vẽ nền custom
        btnTable.setContentAreaFilled(true);  // Bật nền để hiển thị màu
        // THAY ĐỔI: Chỉ hiển thị số bàn với dấu #
        btnTable.setText("Bàn #" + tableNumber);
        btnTable.setPreferredSize(new Dimension(90, 90)); // Kích thước 90x90
        btnTable.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 18));

        // Thiết lập viền và tắt hiệu ứng mặc định
        btnTable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.WHITE, 2)); // Viền trắng dày 2
        btnTable.setBorderPainted(true);
        btnTable.setFocusPainted(false);      // Tắt hiệu ứng focus
        btnTable.setRolloverEnabled(false);   // Tắt rollover mặc định
        
        // Tắt focus để tránh hiệu ứng focus
        btnTable.setFocusable(false);
        btnTable.setRequestFocusEnabled(false);

        final int buttonStatus = (table != null) ? table.getStatus() : -1;

        if (table == null) {
            btnTable.setEnabled(false);
            btnTable.setBackground(new Color(120, 144, 156));
        } else {
            btnTable.setEnabled(true);
            if (tableNumber == selectedTableNumber) {
                btnTable.setBorder(new CompoundBorder(
                    new LineBorder(Color.decode("#424242"), 2, true), // Viền xám đậm
                    new LineBorder(Color.WHITE, 2)
                ));
                btnTable.setBorderPainted(true);
                selectedButton = btnTable;
                // Button đã chọn sẽ có màu đậm nhất theo status
                btnTable.setBackground(getSelectedColorByStatus(buttonStatus));
            } else {
                btnTable.setBackground(getBaseColorByStatus(buttonStatus));
            }
            btnTable.setActionCommand(String.valueOf(table.getTable_number()));
            btnTable.addActionListener((ActionEvent e) -> {
                // Thêm kiểm tra để tránh xử lý nhiều sự kiện đồng thời
                if (!isProcessingSelection) {
                    int num = Integer.parseInt(e.getActionCommand());
                    this.selectTable(num, btnTable);
                }
            });

            // Lưu màu gốc của button
            final Color originalButtonColor = getBaseColorByStatus(buttonStatus);
            final Color selectedButtonColor = getSelectedColorByStatus(buttonStatus);

            // Sử dụng ButtonModel để xử lý hiệu ứng pressed (màu PINK)
            btnTable.getModel().addChangeListener(e -> {
                ButtonModel model = btnTable.getModel();
                
                if (!btnTable.isEnabled() || isProcessingSelection) {
                    return;
                }
                
                if (model.isPressed()) {
                    // Khi bấm giữ - đổi thành màu PINK
                    btnTable.setBackground(Color.PINK);
                } else {
                    // Khi thả chuột - trở về màu ban đầu
                    if (btnTable == selectedButton) {
                        // Nếu là button đã chọn thì về màu đậm nhất
                        btnTable.setBackground(selectedButtonColor);
                    } else {
                        // Nếu không phải button đã chọn thì về màu gốc
                        btnTable.setBackground(originalButtonColor);
                    }
                }
            });

            // THÊM HIỆU ỨNG HOVER
            btnTable.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        btnTable.setBackground(getHoverColorByStatus(buttonStatus));
                    }
                }
                
                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        btnTable.setBackground(originalButtonColor);
                    }
                }
            });
        }
        return btnTable;
    }

    // Sửa lại selectTable
    private void selectTable(int tableNumber, JButton btnTable) {
        // Đặt flag để tránh xử lý nhiều sự kiện đồng thời
        isProcessingSelection = true;
        
        try {
            System.out.println("Đã chọn bàn số: " + tableNumber);

            // Đổi border và màu button cũ về mặc định
            if (selectedButton != null && selectedButton != btnTable) {
                selectedButton.setBorder(javax.swing.BorderFactory.createLineBorder(Color.WHITE, 2));
                selectedButton.setBorderPainted(true);
                // Lấy lại trạng thái của button cũ để set lại màu nền
                TableForCustomer oldTable = tableDAO.findById(selectedTableNumber);
                if (oldTable != null) {
                    selectedButton.setBackground(getBaseColorByStatus(oldTable.getStatus()));
                }
                selectedButton.repaint();
            }

            // Đặt border màu xám đậm dày 4px cho button mới
            btnTable.setBorder(new CompoundBorder(
                new LineBorder(Color.decode("#424242"), 2, true),
                new LineBorder(Color.WHITE, 2)
            ));
            btnTable.setBorderPainted(true);

            // Đổi màu nền button được chọn thành màu đậm nhất theo status
            TableForCustomer table = tableDAO.findById(tableNumber);
            if (table != null) {
                // Sử dụng màu đậm nhất theo status
                btnTable.setBackground(getSelectedColorByStatus(table.getStatus()));
            }

            selectedButton = btnTable;
            selectedTableNumber = tableNumber;
            btnTable.repaint();

            // Fill form
            if (table != null) {
                setForm(table);
            } else {
                System.err.println("Không tìm thấy bàn số " + tableNumber + " trong database!");
            }
            
        } finally {
            // Đảm bảo flag được reset sau khi xử lý xong
            isProcessingSelection = false;
        }
    }

    @Override
    public void open() {
        loadTable();
        this.setVisible(true);
    }

    // Cập nhật phương thức convertStatusToInt để xử lý đầy đủ các trạng thái
    private int convertStatusToInt(String status) {
        switch (status) {
            case "Trống": return 0;
            case "Đang Phục Vụ": return 1;
            case "Không hoạt động": return 2;
            default: return 0;
        }
    }

    private String convertIntToStatus(int status) {
        switch (status) {
            case 0: return "Trống";
            case 1: return "Đang Phục Vụ";
            case 2: return "Không hoạt động";
            default: return "Trống";
        }
    }

    // Cập nhật phương thức setForm để chuyển đổi status
    @Override
    public void setForm(Object entity) {
        if (entity instanceof TableForCustomer) {
            TableForCustomer table = (TableForCustomer) entity;
            
            // Fill thông tin vào form bên trái (thông tin bàn hiện tại)
            txtTable_Number.setText(String.valueOf(table.getTable_number()));
            cboTable_Status.setSelectedItem(convertIntToStatus(table.getStatus()));
            
            // Fill thông tin vào form bên phải (form chỉnh sửa)
   
            txtAmount.setText(String.valueOf(table.getAmount()));

            
            System.out.println("Đã fill thông tin bàn số " + table.getTable_number() + " lên form");
        }
    }

    // Cập nhật phương thức getForm để chuyển đổi status
    @Override
    public Object getForm() {
        TableForCustomer table = new TableForCustomer();
        try {
            table.setTable_number(Integer.parseInt(txtTable_Number.getText()));
            table.setAmount(Integer.parseInt(txtAmount.getText()));
            String statusText = (String) cboTable_Status.getSelectedItem();
            table.setStatus(convertStatusToInt(statusText));
        } catch (NumberFormatException e) {
            System.err.println("Lỗi chuyển đổi dữ liệu: " + e.getMessage());
        }
        return table;
    }

    @Override
    public void fillToTable() {
        loadTable();
    }

    @Override
    public void edit() {
      
    }

    // Cập nhật phương thức create để không kiểm tra trùng lặp nữa
    @Override
    public void create() {
        try {
            // Validate form data
            String validationError = validateFormData();
            if (validationError != null) {
                XDialog.error(validationError, "Lỗi dữ liệu");
                return;
            }
            
            TableForCustomer table = (TableForCustomer) getForm();
            
            // Kiểm tra số bàn đã tồn tại chưa
            if (isTableExists(table.getTable_number())) {
                XDialog.warning("Số bàn đã tồn tại!", "Cảnh báo");
                return;
            }
            
            // Hiển thị dialog xác nhận thêm
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn thêm bàn số " + table.getTable_number() + "?", 
                "Xác nhận thêm"
            );
            
            if (confirm) {
                tableDAO.create(table);
                XDialog.success("Thêm bàn thành công!", "Thành công");
                fillToTable();
                clear();
            }
        } catch (Exception e) {
            XDialog.error("Lỗi khi thêm bàn: " + e.getMessage(), "Lỗi");
        }
    }

    // Cập nhật phương thức update
    @Override
    public void update() {
        try {
            // Validate form data
            String validationError = validateFormData();
            if (validationError != null) {
                XDialog.error(validationError, "Lỗi dữ liệu");
                return;
            }
            
            // Kiểm tra xem có đang chọn bàn nào không
            if (selectedTableNumber == -1) {
                XDialog.error("Vui lòng chọn bàn cần cập nhật!", "Lỗi");
                return;
            }
            
            TableForCustomer table = (TableForCustomer) getForm();
            
            // Kiểm tra số bàn đã tồn tại chưa (trừ bàn đang được chọn)
            List<TableForCustomer> existingTables = tableDAO.findAll();
            boolean tableExists = existingTables.stream()
                .anyMatch(t -> t.getTable_number() == table.getTable_number() 
                              && t.getTable_number() != selectedTableNumber);
            
            if (tableExists) {
                XDialog.warning("Số bàn đã tồn tại!", "Cảnh báo");
                return;
            }
            
            // Hiển thị dialog xác nhận cập nhật
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn cập nhật bàn số " + table.getTable_number() + "?", 
                "Xác nhận cập nhật"
            );
            
            if (confirm) {
                tableDAO.update(table);
                XDialog.success("Cập nhật bàn thành công!", "Thành công");
                fillToTable();
                clear();
            }
        } catch (Exception e) {
            XDialog.error("Lỗi khi cập nhật bàn: " + e.getMessage(), "Lỗi");
        }
    }

    // Cập nhật phương thức delete
    @Override
    public void delete() {
        try {
            TableForCustomer table = (TableForCustomer) getForm();
            if (table == null || table.getTable_number() == 0) {
                XDialog.error("Vui lòng chọn bàn cần xóa!", "Lỗi");
                return;
            }
            
            // Kiểm tra bàn có đang sử dụng không
            if (table.getStatus() == 1) {
                XDialog.warning("Không thể xóa bàn đang được sử dụng!", "Cảnh báo");
                return;
            }
            
            // Hiển thị dialog xác nhận xóa
            boolean confirm = XDialog.confirm(
                "Bạn có chắc chắn muốn xóa bàn số " + table.getTable_number() + "?\n" +
                "Hành động này không thể hoàn tác!", 
                "Xác nhận xóa"
            );
            
            if (confirm) {
                tableDAO.deleteById(table.getTable_number());
                XDialog.success("Xóa bàn thành công!", "Thành công");
                fillToTable();
                clear();
            }
        } catch (Exception e) {
            XDialog.error("Lỗi khi xóa bàn: " + e.getMessage(), "Lỗi");
        }
    }

    // Cập nhật phương thức clear
    @Override
    public void clear() {
        try {
            txtTable_Number.setText("");
            txtAmount.setText("");
            cboTable_Status.setSelectedIndex(0);
            XDialog.alert("Làm mới thành công!");
        } catch (Exception ex) {
            XDialog.alert("Làm mới thất bại!\n" + ex.getMessage());
        }
    }

    @Override
    public void setEditable(boolean editable) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void changeTable() {
        String currentTableStr = txtTable_Number.getText().trim();
        if (currentTableStr.isEmpty()) {
            XDialog.alert("Vui lòng chọn bàn cần chuyển!");
            return;
        }
        int currentTableNumber;
        try {
            currentTableNumber = Integer.parseInt(currentTableStr);
        } catch (NumberFormatException e) {
            XDialog.alert("Số bàn không hợp lệ!");
            return;
        }

        TableForCustomer currentTable = tableDAO.findById(currentTableNumber);
        if (currentTable == null) {
            XDialog.alert("Không tìm thấy bàn này trong hệ thống!");
            return;
        }

        // Lấy danh sách bàn trống (status = 0, khác bàn hiện tại)
        List<TableForCustomer> allTables = tableDAO.findAll();
        List<TableForCustomer> emptyTables = new java.util.ArrayList<>();
        for (TableForCustomer t : allTables) {
            if (t.getStatus() == 0 && t.getTable_number() != currentTableNumber) {
                emptyTables.add(t);
            }
        }

        if (emptyTables.isEmpty()) {
            XDialog.alert("Không có bàn trống nào để chuyển!\nVui lòng thử lại sau.");
            return;
        }

        // Tạo mảng số bàn để hiển thị cho người dùng chọn
        Integer[] tableNumbers = emptyTables.stream()
                .map(TableForCustomer::getTable_number)
                .toArray(Integer[]::new);

        Integer selectedTableNumber = (Integer) javax.swing.JOptionPane.showInputDialog(
                this,
                "Chọn bàn muốn chuyển sang:",
                "Chuyển bàn",
                javax.swing.JOptionPane.QUESTION_MESSAGE,
                null,
                tableNumbers,
                tableNumbers[0]
        );

        if (selectedTableNumber == null) {
            // Người dùng bấm Cancel hoặc đóng dialog
            return;
        }

        // Tìm bàn mới được chọn
        TableForCustomer newTable = null;
        for (TableForCustomer t : emptyTables) {
            if (t.getTable_number() == selectedTableNumber) {
                newTable = t;
                break;
            }
        }
        if (newTable == null) {
            XDialog.alert("Không tìm thấy bàn mới để chuyển!");
            return;
        }

        // Xác nhận trước khi chuyển trạng thái
        if (XDialog.confirm(String.format("Bạn có chắc chắn muốn chuyển sang bàn số %d không?", newTable.getTable_number()), "Xác nhận chuyển bàn")) {
            try {
                newTable.setStatus(1); // Đang phục vụ
                currentTable.setStatus(0); // Trống

                tableDAO.update(newTable);
                tableDAO.update(currentTable);

                XDialog.alert(String.format("Chuyển thành công sang bàn số %d!", newTable.getTable_number()));
                loadTable();
                setForm(newTable);
            } catch (Exception ex) {
                XDialog.alert("Chuyển trạng thái bàn thất bại!\n" + ex.getMessage());
            }
        }
        // Nếu chọn "Không" thì không làm gì cả
    }

    private void updateTableStatus(TableForCustomer table, int newStatus) {
        if (XDialog.confirm("Bạn có chắc chắn muốn chuyển trạng thái bàn này không?", "Xác nhận chuyển trạng thái")) {
            try {
                table.setStatus(newStatus);
                tableDAO.update(table);
                XDialog.alert("Chuyển trạng thái bàn thành công!");
                loadTable();
                setForm(table);
            } catch (Exception ex) {
                XDialog.alert("Chuyển trạng thái bàn thất bại!\n" + ex.getMessage());
            }
        }
        // Nếu chọn "Không" thì không làm gì cả
    }

    // Thêm hàm để áp dụng hiệu ứng cho tất cả button trong form
    private void applyMousePressEffectToAllButtons() {
        // Áp dụng cho các button chính
        addMousePressEffect(btnAdd);
        addMousePressEffect(btnUpdate);
        addMousePressEffect(btnClear);
        addMousePressEffect(btnDelete);
        addMousePressEffect(btnExit);
    }

    private String validateFormData() {
        TableForCustomer table = (TableForCustomer) getForm();
        
        if (table.getTable_number() <= 0) {
            return "Số bàn phải lớn hơn 0!";
        }
        
        if (table.getAmount() <= 0) {
            return "Số lượng chỗ ngồi phải lớn hơn 0!";
        }
        
        if (table.getAmount() > 20) {
            return "Số lượng chỗ ngồi không được quá 20!";
        }
        
        return null; // Không có lỗi
    }
}
