/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View.Dialogs;

import com.team4.quanliquanmicay.util.XTheme;

import com.team4.quanliquanmicay.DAO.TableForCustomerDAO;
import com.team4.quanliquanmicay.Entity.TableForCustomer;
import com.team4.quanliquanmicay.Impl.TableForCustomerDAOImpl;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.border.LineBorder;
import javax.swing.border.CompoundBorder;

/**
 *
 * @author Asus
 */
public class ChooseTable extends javax.swing.JFrame {

    /**
     * Creates new form ChooseTable
     */
    public ChooseTable() {
        this.setUndecorated(true);
        XTheme.applyFullTheme();
        initComponents();
        this.setLocationRelativeTo(null);
        // Thêm dòng này để fill dữ liệu khi mở form
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CHỌN BÀN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(403, 403, 403)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 998, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("1-12", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 998, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("13-24", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Thêm các biến sau vào class ChooseTable
    private TableForCustomerDAO tableDAO = new TableForCustomerDAOImpl();
    private JButton selectedButton = null;
    private int selectedTableNumber = -1;

    // Hàm fill dữ liệu bàn lên 2 panel
    private void loadTable() {
        List<TableForCustomer> tables = tableDAO.findAll();

        // Xóa tất cả bàn cũ trong panel
        jPanel2.removeAll();
        jPanel3.removeAll();

        // Tạo map để tra cứu nhanh
        java.util.Map<Integer, TableForCustomer> tableMap = new java.util.HashMap<>();
        for (TableForCustomer t : tables) {
            tableMap.put(t.getTable_number(), t);
        }

        // 1-12: Normal
        jPanel2.setLayout(new java.awt.GridLayout(2, 6, 15, 15));
        for (int i = 1; i <= 12; i++) {
            TableForCustomer table = tableMap.get(i);
            jPanel2.add(this.createButton(i, table));
        }

        // 13-24: VIP
        jPanel3.setLayout(new java.awt.GridLayout(2, 6, 15, 15));
        for (int i = 13; i <= 24; i++) {
            TableForCustomer table = tableMap.get(i);
            jPanel3.add(this.createButton(i, table));
        }

        // Cập nhật giao diện
        jPanel2.revalidate();
        jPanel2.repaint();
        jPanel3.revalidate();
        jPanel3.repaint();
    }

    // Hàm tạo button cho từng bàn
    private JButton createButton(int tableNumber, TableForCustomer table) {
        JButton btnTable = new JButton();
        btnTable.setContentAreaFilled(false);
        btnTable.setOpaque(true);
        btnTable.setText(String.format("Bàn #%d", tableNumber));
        btnTable.setPreferredSize(new Dimension(120, 120));
        btnTable.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 22));
        btnTable.setOpaque(true);
        btnTable.setContentAreaFilled(true);
        btnTable.setBorderPainted(false);
        btnTable.setFocusPainted(false);
        btnTable.setRolloverEnabled(false);

        final int buttonStatus = (table != null) ? table.getStatus() : -1;

        if (table == null) {
            btnTable.setEnabled(false);
            btnTable.setBackground(new Color(120, 144, 156));
        } else {
            btnTable.setEnabled(true);
            btnTable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
            btnTable.setBorderPainted(true);
            if (tableNumber == selectedTableNumber) {
                btnTable.setBorder(new CompoundBorder(
                    new LineBorder(Color.PINK, 4, true),
                    new LineBorder(Color.LIGHT_GRAY, 2)
                ));
                btnTable.setBorderPainted(true);
                selectedButton = btnTable;
            } else {
                switch (buttonStatus) {
                    case 0: btnTable.setBackground(Color.decode("#bdbdbd")); break;
                    case 1: btnTable.setBackground(Color.decode("#27ae60")); break;
                    case 2: btnTable.setBackground(Color.decode("#f5f5f5")); break;
                    default: btnTable.setBackground(new Color(55, 71, 79));
                }
            }
            btnTable.setActionCommand(String.valueOf(table.getTable_number()));
            btnTable.addActionListener((ActionEvent e) -> {
                int num = Integer.parseInt(e.getActionCommand());
                this.selectTable(num, btnTable);
            });

            btnTable.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        btnTable.setBackground(getHoverColorByStatus(buttonStatus));
                        btnTable.repaint();
                    }
                }
                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    if (btnTable != selectedButton && btnTable.isEnabled()) {
                        switch (buttonStatus) {
                            case 0: btnTable.setBackground(Color.decode("#bdbdbd")); break;
                            case 1: btnTable.setBackground(Color.decode("#27ae60")); break;
                            case 2: btnTable.setBackground(Color.decode("#f5f5f5")); break;
                            default: btnTable.setBackground(new Color(55, 71, 79));
                        }
                        btnTable.repaint();
                    }
                }
                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    if (btnTable.isEnabled()) {
                        btnTable.setBackground(Color.decode("#ff69b4"));
                        btnTable.repaint();
                    }
                }
                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    if (btnTable.isEnabled()) {
                        if (btnTable == selectedButton) {
                            TableForCustomer table = tableDAO.findById(Integer.parseInt(btnTable.getActionCommand()));
                            if (table != null) {
                                btnTable.setBackground(getSelectedColorByStatus(table.getStatus()));
                            }
                        } else {
                            switch (buttonStatus) {
                                case 0: btnTable.setBackground(Color.decode("#bdbdbd")); break;
                                case 1: btnTable.setBackground(Color.decode("#27ae60")); break;
                                case 2: btnTable.setBackground(Color.decode("#f5f5f5")); break;
                                default: btnTable.setBackground(new Color(55, 71, 79));
                            }
                        }
                        btnTable.repaint();
                    }
                }
            });
        }
        return btnTable;
    }

    // Hàm chọn bàn (nếu muốn fill thông tin lên form khác thì bổ sung ở đây)
    private void selectTable(int tableNumber, JButton btnTable) {
        // Đổi border và màu button cũ về mặc định
        if (selectedButton != null && selectedButton != btnTable) {
            selectedButton.setBorder(javax.swing.BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
            selectedButton.setBorderPainted(true);
            TableForCustomer oldTable = tableDAO.findById(selectedTableNumber);
            if (oldTable != null) {
                switch (oldTable.getStatus()) {
                    case 0: selectedButton.setBackground(Color.decode("#bdbdbd")); break;
                    case 1: selectedButton.setBackground(Color.decode("#27ae60")); break;
                    case 2: selectedButton.setBackground(Color.decode("#f5f5f5")); break;
                    default: selectedButton.setBackground(new Color(55, 71, 79));
                }
            }
        }

        // Đặt border màu #00fe92 dày 4px cho button mới
        btnTable.setBorder(new CompoundBorder(
            new LineBorder(Color.decode("#00fe92"), 4, true),
            new LineBorder(Color.LIGHT_GRAY, 2)
        ));
        btnTable.setBorderPainted(true);

        // Đổi màu nền button được chọn thành màu đậm hơn theo status
        TableForCustomer table = tableDAO.findById(tableNumber);
        if (table != null) {
            btnTable.setBackground(getSelectedColorByStatus(table.getStatus()));
        }

        selectedButton = btnTable;
        selectedTableNumber = tableNumber;

        // Nếu muốn fill thông tin bàn lên form thì bổ sung ở đây
        // Ví dụ: lblInfo.setText("Bàn số: " + tableNumber);
    }

    // Hàm màu cho trạng thái
    private Color getSelectedColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#616161");
            case 1: return Color.decode("#186a3b");
            case 2: return Color.decode("#757575");
            default: return Color.GRAY;
        }
    }
    private Color getHoverColorByStatus(int status) {
        switch (status) {
            case 0: return Color.decode("#616161");
            case 1: return Color.decode("#196f3d");
            case 2: return Color.decode("#bdbdbd");
            default: return Color.GRAY;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
