/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.team4.quanliquanmicay.View.Dialogs;

import com.team4.quanliquanmicay.Controller.EmployeeController;
import com.team4.quanliquanmicay.DAO.RoleDAO;
import com.team4.quanliquanmicay.DAO.UserDAO;
import com.team4.quanliquanmicay.Entity.UserAccount;
import com.team4.quanliquanmicay.Entity.UserRole;
import com.team4.quanliquanmicay.Impl.RoleDAOImpl;
import com.team4.quanliquanmicay.Impl.UserDAOImpl;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import com.team4.quanliquanmicay.util.XImage;
import java.text.SimpleDateFormat;
import com.team4.quanliquanmicay.util.XDialog;

/**
 *
 * @author HP
 */
public class NhanVienJDialog extends javax.swing.JFrame implements EmployeeController {

    /**
     * Creates new form NhanVienJDialog
     */
    private UserDAO userDAO;
    private RoleDAO roleDAO; // Thêm RoleDAO
    private Map<String, String> roleMap; // Cache role_id -> name_role

    public NhanVienJDialog() {
        initComponents();
        this.setLocationRelativeTo(null);

        // Khởi tạo DAO
        this.userDAO = new UserDAOImpl();
        this.roleDAO = new RoleDAOImpl(); // Khởi tạo RoleDAO
        this.roleMap = new HashMap<>(); // Khởi tạo cache

        // Load roles và status từ DB
        loadRoles();

        // Load dữ liệu lên bảng khi khởi động
        fillToTable();

        // Set độ rộng cột
        setColumnWidths();

        // Thêm event listener cho nút LƯU
        tableInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 1) {
                    edit(); // Tự động load dữ liệu và ảnh khi click
                }
            }
        });

        // ✅ ADD: Performance optimizations
        setupPerformanceOptimizations();

        // ✅ PRODUCTION: Load image instantly (thay thế testLoadImage)
        preloadDefaultImages();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupGioiTinh = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIdEmployee = new javax.swing.JTextField();
        txtNameEmployee = new javax.swing.JTextField();
        chkMale = new javax.swing.JCheckBox();
        chkFemale = new javax.swing.JCheckBox();
        txtPhoneNumber = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNameAccount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cboStatus = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cboRole = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(230, 230, 230), 2));

        jLabel1.setBackground(new java.awt.Color(153, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setText("QUẢN LÍ NHÂN VIÊN FIVE C");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel3.setText("TÊN ĐĂNG NHẬP : ");

        jLabel4.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel4.setText("HỌ TÊN NHÂN VIÊN :");

        jLabel5.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel5.setText("GIỚI TÍNH :");

        jLabel7.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel7.setText("SỐ ĐIỆN THOẠI :");

        txtIdEmployee.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtNameEmployee.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        groupGioiTinh.add(chkMale);
        chkMale.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chkMale.setText("NAM");

        groupGioiTinh.add(chkFemale);
        chkFemale.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chkFemale.setText("NỮ");

        txtPhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255), 2));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel10.setText("MÃ NHÂN VIÊN :");

        txtNameAccount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel11.setText("MẬT KHẨU :");

        txtPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel12.setText("EMAIL :");

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel13.setText("TRẠNG THÁI :");

        cboStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel14.setText("VAI TRÒ :");

        cboRole.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(txtNameEmployee)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(chkMale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkFemale))
                    .addComponent(txtIdEmployee)
                    .addComponent(txtPhoneNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(txtNameAccount, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(cboStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboRole, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(77, 77, 77))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtIdEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtNameEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(chkMale)
                                    .addComponent(chkFemale)
                                    .addComponent(jLabel5))
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtNameAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel14))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cboRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8))
        );

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("THÔNG TIN CÁ NHÂN");

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204), 2));

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/delete.png"))); // NOI18N
        btnClear.setText("LÀM MỚI");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/icons8-delete-48.png"))); // NOI18N
        btnDelete.setText("XÓA ");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/refresh.png"))); // NOI18N
        btnUpdate.setText("CẬP NHẬT");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/Add to basket.png"))); // NOI18N
        btnSave.setText("LƯU");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons_and_images/icons8-exit-32.png"))); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(67, 67, 67))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addGap(16, 16, 16))
        );

        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Tài khoản", "Mật khẩu", "Họ và tên", "Giới tính", "SĐT", "Email", "Trạng thái", "Vai trò", "Ngày tạo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableInfo);
        if (tableInfo.getColumnModel().getColumnCount() > 0) {
            tableInfo.getColumnModel().getColumn(0).setResizable(false);
            tableInfo.getColumnModel().getColumn(1).setResizable(false);
            tableInfo.getColumnModel().getColumn(2).setResizable(false);
            tableInfo.getColumnModel().getColumn(3).setResizable(false);
            tableInfo.getColumnModel().getColumn(4).setResizable(false);
            tableInfo.getColumnModel().getColumn(5).setResizable(false);
            tableInfo.getColumnModel().getColumn(6).setResizable(false);
            tableInfo.getColumnModel().getColumn(7).setResizable(false);
            tableInfo.getColumnModel().getColumn(8).setResizable(false);
            tableInfo.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(575, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(502, 502, 502))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(424, 424, 424))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(157, 157, 157))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler cho nút LÀM MỚI
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        clearForNewEntry();
    }

    /**
     * Clear form và chuẩn bị cho việc tạo nhân viên mới
     */
    private void clearForNewEntry() {
        // 1. Clear toàn bộ dữ liệu trên form
        txtIdEmployee.setText("");
        txtNameAccount.setText("");
        txtPassword.setText("");
        txtNameEmployee.setText("");
        txtPhoneNumber.setText("");
        txtEmail.setText("");
        
        // 2. Reset giới tính
        groupGioiTinh.clearSelection();
        
        // 3. Reset hình ảnh
        lblImage.setText("No Image");
        lblImage.setIcon(null);
        
        // 4. Clear selection trong bảng
        tableInfo.clearSelection();
        
        // 5. ✅ QUAN TRỌNG: Enable mã nhân viên để có thể tạo mới
        txtIdEmployee.setEditable(true);
        
        // 6. Enable tất cả các trường khác
        setAllFieldsEditable(true);
        
        // 7. Focus vào mã nhân viên để bắt đầu nhập
        txtIdEmployee.requestFocus();
        
        System.out.println("✅ Đã clear form và sẵn sàng tạo nhân viên mới!");
    }

    /**
     * Set editable cho tất cả các trường (trừ ID nếu cần)
     */
    private void setAllFieldsEditable(boolean editable) {
        txtNameAccount.setEditable(editable);
        txtPassword.setEditable(editable);
        txtNameEmployee.setEditable(editable);
        txtPhoneNumber.setEditable(editable);
        txtEmail.setEditable(editable);
        
        chkMale.setEnabled(editable);
        chkFemale.setEnabled(editable);
        cboStatus.setEnabled(editable);
        cboRole.setEnabled(editable);
    }

    /**
     * Event handler cho nút LƯU (TẠO)
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {
        create();
    }

    /**
     * Event handler cho nút UPDATE
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        update();
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Event handler cho nút EXIT ở dòng 496
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {
        exitApplication();
    }

    /**
     * Thoát ứng dụng với xác nhận
     */
    private void exitApplication() {
        try {
            // 1. Kiểm tra có thay đổi dữ liệu chưa lưu không
            if (hasUnsavedChanges()) {
                if (!handleUnsavedChanges()) {
                    return; // Người dùng hủy hoặc lưu thất bại
                }
            }

            // 2. Xác nhận thoát
            if (confirmExit()) {
                performExit();
            }

        } catch (Exception e) {
            XDialog.alert("Lỗi khi thoát ứng dụng: " + e.getMessage(), "Lỗi hệ thống");
            e.printStackTrace();
        }
    }

    /**
     * Kiểm tra có dữ liệu chưa lưu không
     */
    private boolean hasUnsavedChanges() {
        return !txtIdEmployee.getText().trim().isEmpty()
                || !txtNameAccount.getText().trim().isEmpty()
                || !txtPassword.getText().trim().isEmpty()
                || !txtNameEmployee.getText().trim().isEmpty()
                || !txtPhoneNumber.getText().trim().isEmpty()
                || !txtEmail.getText().trim().isEmpty()
                || chkMale.isSelected()
                || chkFemale.isSelected();
    }

    /**
     * Xử lý dữ liệu chưa lưu
     *
     * @return true nếu có thể tiếp tục thoát, false nếu cần dừng lại
     */
    private boolean handleUnsavedChanges() {
        boolean saveBeforeExit = XDialog.confirm(
                "⚠️ Có dữ liệu chưa được lưu!\n\n"
                + "Bạn có muốn lưu trước khi thoát không?\n\n"
                + "• Chọn 'Có' để lưu và thoát\n"
                + "• Chọn 'Không' để thoát mà không lưu",
                "Dữ liệu chưa lưu"
        );

        if (saveBeforeExit) {
            try {
                create(); // Hoặc update() tùy trường hợp
                XDialog.alert("Đã lưu dữ liệu thành công!", "Thông báo");
                return true;
            } catch (Exception e) {
                XDialog.alert("Lỗi khi lưu dữ liệu: " + e.getMessage(), "Lỗi");
                return false; // Lưu thất bại, không thoát
            }
        }

        return true; // Không lưu nhưng vẫn thoát
    }

    /**
     * Xác nhận thoát ứng dụng
     */
    private boolean confirmExit() {
        return XDialog.confirm(
                "Bạn có chắc chắn muốn thoát ứng dụng Quản lý Nhân viên?",
                "Xác nhận thoát"
        );
    }

    /**
     * Thực hiện thoát ứng dụng
     */
    private void performExit() {
        // Cleanup logic nếu cần
        System.out.println("Đang thoát ứng dụng Quản lý Nhân viên...");

        // Thoát ứng dụng
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NhanVienJDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboRole;
    private javax.swing.JComboBox<String> cboStatus;
    private javax.swing.JCheckBox chkFemale;
    private javax.swing.JCheckBox chkMale;
    private javax.swing.ButtonGroup groupGioiTinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTable tableInfo;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIdEmployee;
    private javax.swing.JTextField txtNameAccount;
    private javax.swing.JTextField txtNameEmployee;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPhoneNumber;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadRoles() {
        try {
            // Load các vai trò từ database
            cboRole.removeAllItems();
            cboRole.addItem("Tất cả");

            List<UserRole> roles = roleDAO.findAll();
            for (UserRole role : roles) {
                // Cache role mapping
                roleMap.put(role.getRole_id(), role.getName_role());

                // Hiển thị trong ComboBox
                String displayText = role.getRole_id() + " - " + role.getName_role();
                cboRole.addItem(displayText);
            }

            // Load trạng thái
            cboStatus.removeAllItems();
            cboStatus.addItem("Tất cả");
            cboStatus.addItem("Hoạt động");
            cboStatus.addItem("Không hoạt động");

            // Thêm event listeners cho filter
            addFilterListeners();

            System.out.println("Đã load " + roles.size() + " roles từ database");

        } catch (Exception e) {
            XDialog.alert("Lỗi khi load roles: " + e.getMessage());
            e.printStackTrace();
            loadRolesFallback();
        }
    }

    /**
     * Fallback method nếu không load được từ DB
     */
    private void loadRolesFallback() {
        // Fallback data
        roleMap.clear();
        roleMap.put("R001", "Manager");
        roleMap.put("R002", "Staff");

        cboRole.removeAllItems();
        cboRole.addItem("Tất cả");
        cboRole.addItem("R001 - Manager");
        cboRole.addItem("R002 - Staff");

        cboStatus.removeAllItems();
        cboStatus.addItem("Tất cả");
        cboStatus.addItem("Hoạt động");
        cboStatus.addItem("Không hoạt động");

        addFilterListeners();
    }

    /**
     * Thêm event listeners cho ComboBox để filter dữ liệu
     */
    private void addFilterListeners() {
        // Event listener cho cboStatus
        cboStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAndFillTable();
            }
        });

        // Event listener cho cboRole
        cboRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAndFillTable();
            }
        });
    }

    /**
     * Filter và fill dữ liệu theo Status và Role được chọn
     */
    private void filterAndFillTable() {
        // Xóa dữ liệu cũ trong bảng
        DefaultTableModel model = (DefaultTableModel) tableInfo.getModel();
        model.setRowCount(0);

        try {
            // Lấy điều kiện filter
            String selectedStatus = (String) cboStatus.getSelectedItem();
            String selectedRole = (String) cboRole.getSelectedItem();

            // Lấy danh sách nhân viên từ database
            List<UserAccount> employees = userDAO.findAll();

            // Filter theo điều kiện
            List<UserAccount> filteredEmployees = filterEmployees(employees, selectedStatus, selectedRole);

            // Đổ dữ liệu đã filter vào bảng
            for (UserAccount emp : filteredEmployees) {
                // DEBUG: In ra giá trị created_date
                System.out.println("DEBUG Created Date for " + emp.getUser_id() + ": " + emp.getCreated_date());

                Object[] row = {
                    emp.getUser_id(), // Mã nhân viên
                    emp.getUsername(), // Tài khoản
                    emp.getPass(), // Mật khẩu
                    emp.getFullName(), // Họ và tên
                    emp.getGender() != null ? (emp.getGender() == 1 ? "Nam" : "Nữ") : "Không xác định", // Giới tính: 1=Nam, 0=Nữ
                    emp.getPhone_number(), // SĐT
                    emp.getEmail(), // Email
                    emp.getIs_enabled() != null ? (emp.getIs_enabled() == 1 ? "Hoạt động" : "Không hoạt động") : "Không xác định", // Trạng thái
                    getRoleName(emp.getRole_id()), // Vai trò - Hiển thị tên thay vì ID
                    formatDate(emp.getCreated_date()) // Ngày tạo - Format đúng
                };
                model.addRow(row);
            }

            System.out.println("Đã filter và load " + filteredEmployees.size() + "/" + employees.size() + " nhân viên");

        } catch (Exception e) {
            XDialog.alert("Lỗi khi filter dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Filter danh sách nhân viên theo Status và Role
     */
    private List<UserAccount> filterEmployees(List<UserAccount> employees, String selectedStatus, String selectedRole) {
        List<UserAccount> filtered = new ArrayList<>();

        for (UserAccount emp : employees) {
            boolean matchStatus = true;
            boolean matchRole = true;

            // Filter theo Status
            if (selectedStatus != null && !selectedStatus.equals("Tất cả")) {
                if (selectedStatus.equals("Hoạt động")) {
                    matchStatus = (emp.getIs_enabled() != null && emp.getIs_enabled() == 1);
                } else if (selectedStatus.equals("Không hoạt động")) {
                    matchStatus = (emp.getIs_enabled() != null && emp.getIs_enabled() == 0);
                }
            }

            // Filter theo Role - cần extract role_id từ display text
            if (selectedRole != null && !selectedRole.equals("Tất cả")) {
                String roleId = extractRoleId(selectedRole);
                matchRole = roleId.equals(emp.getRole_id());
            }

            // Chỉ thêm vào danh sách nếu thỏa mãn cả 2 điều kiện
            if (matchStatus && matchRole) {
                filtered.add(emp);
            }
        }

        return filtered;
    }

    /**
     * Extract role_id từ display text (VD: "R001 - Manager" -> "R001")
     */
    private String extractRoleId(String displayText) {
        if (displayText != null && displayText.contains(" - ")) {
            return displayText.split(" - ")[0];
        }
        return displayText; // Fallback
    }

    /**
     * Lấy tên vai trò từ cache (nhanh hơn)
     */
    private String getRoleName(String roleId) {
        if (roleId != null && roleMap.containsKey(roleId)) {
            return roleMap.get(roleId); // Manager, Staff
        }
        return "Không xác định";
    }

    /**
     * Format ngày tháng để hiển thị trong bảng
     */
    private String formatDate(java.util.Date date) {
        if (date == null) {
            return "Chưa có";
        }

        try {
            // Format ngày theo định dạng dd/MM/yyyy HH:mm
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm");
            return sdf.format(date);
        } catch (Exception e) {
            System.err.println("Lỗi format date: " + e.getMessage());
            return date.toString(); // Fallback
        }
    }

    /**
     * Set độ rộng cột cho bảng
     */
    private void setColumnWidths() {
        try {
            tableInfo.getColumnModel().getColumn(0).setPreferredWidth(80);  // Mã NV
            tableInfo.getColumnModel().getColumn(1).setPreferredWidth(100); // Tài khoản
            tableInfo.getColumnModel().getColumn(2).setPreferredWidth(80);  // Mật khẩu
            tableInfo.getColumnModel().getColumn(3).setPreferredWidth(150); // Họ tên
            tableInfo.getColumnModel().getColumn(4).setPreferredWidth(60);  // Giới tính
            tableInfo.getColumnModel().getColumn(5).setPreferredWidth(100); // SĐT
            tableInfo.getColumnModel().getColumn(6).setPreferredWidth(150); // Email
            tableInfo.getColumnModel().getColumn(7).setPreferredWidth(100); // Trạng thái
            tableInfo.getColumnModel().getColumn(8).setPreferredWidth(80);  // Vai trò
            tableInfo.getColumnModel().getColumn(9).setPreferredWidth(120); // Ngày tạo
        } catch (Exception e) {
            System.err.println("Lỗi set column width: " + e.getMessage());
        }
    }

    /**
     * ✅ INTERFACE: Validate employee (required by EmployeeController)
     */
    @Override
    public void validateEmployee() {
        // Chỉ validate nếu có dữ liệu trong form
        if (txtIdEmployee.getText().trim().isEmpty() && 
            txtNameAccount.getText().trim().isEmpty() &&
            txtPassword.getText().trim().isEmpty() &&
            txtNameEmployee.getText().trim().isEmpty()) {
            // Form trống hoàn toàn - không cần validate
            return;
        }
        
        // Validate các trường bắt buộc
        if (txtIdEmployee.getText().trim().isEmpty()) {
            throw new RuntimeException("Mã nhân viên không được để trống!");
        }
        
        if (txtNameAccount.getText().trim().isEmpty()) {
            throw new RuntimeException("Tên đăng nhập không được để trống!");
        }
        
        if (txtPassword.getText().trim().isEmpty()) {
            throw new RuntimeException("Mật khẩu không được để trống!");
        }
        
        if (txtNameEmployee.getText().trim().isEmpty()) {
            throw new RuntimeException("Họ tên nhân viên không được để trống!");
        }
        
        // Validate giới tính
        if (!chkMale.isSelected() && !chkFemale.isSelected()) {
            throw new RuntimeException("Vui lòng chọn giới tính!");
        }
    }

    /**
     * ✅ ENHANCED: Validate business rules (phone + email format)
     */
    private void validateBusinessRules(UserAccount employee) {
        // 1. Validate số điện thoại
        validatePhoneNumberFormat(employee.getPhone_number());
        
        // 2. Validate email
        validateEmailFormat(employee.getEmail());
    }

    /**
     * ✅ PHONE: Enhanced validation với đầu số Việt Nam
     */
    private void validatePhoneNumberFormat(String phone) {
        if (phone == null || phone.trim().isEmpty()) {
            throw new RuntimeException("Số điện thoại không được để trống!");
        }
        
        String cleanPhone = phone.trim();
        
        // Trường hợp 1: Số quốc tế +84
        if (cleanPhone.startsWith("+84")) {
            if (cleanPhone.length() < 12 || cleanPhone.length() > 13) {
                throw new RuntimeException("Số điện thoại +84 phải có 12-13 số (VD: +84901234567)!");
            }
            
            String numberPart = cleanPhone.substring(3);
            if (!numberPart.matches("\\d+")) {
                throw new RuntimeException("Số điện thoại chỉ được chứa số sau +84!");
            }
            
            // Check đầu số Việt Nam hợp lệ
            if (numberPart.length() >= 2) {
                String prefix = numberPart.substring(0, 2);
                if (!isValidVietnamesePrefix(prefix)) {
                    throw new RuntimeException("Đầu số " + prefix + " không hợp lệ cho điện thoại Việt Nam!");
                }
            }
        }
        // Trường hợp 2: Số nội địa 0x
        else {
            if (cleanPhone.length() != 10) {
                throw new RuntimeException("Số điện thoại phải có đúng 10 số (VD: 0901234567)!");
            }
            
            if (!cleanPhone.matches("\\d+")) {
                throw new RuntimeException("Số điện thoại chỉ được chứa các chữ số!");
            }
            
            if (!cleanPhone.startsWith("0")) {
                throw new RuntimeException("Số điện thoại phải bắt đầu bằng số 0!");
            }
            
            // Check đầu số Việt Nam
            String prefix = cleanPhone.substring(1, 3); // Lấy 2 số sau 0
            if (!isValidVietnamesePrefix(prefix)) {
                throw new RuntimeException("Đầu số " + cleanPhone.substring(0, 3) + " không hợp lệ!");
            }
        }
    }

    /**
     * ✅ CHECK: Đầu số điện thoại Việt Nam hợp lệ (2024)
     */
    private boolean isValidVietnamesePrefix(String prefix) {
        String[] validPrefixes = {
            // Viettel
            "96", "97", "98", "32", "33", "34", "35", "36", "37", "38", "39",
            // MobiFone  
            "90", "93", "70", "79", "77", "76", "78", "89",
            // VinaPhone
            "91", "94", "83", "84", "85", "81", "82", "88",
            // Vietnamobile
            "92", "56", "58", "99",
            // Gmobile & Others
            "87", "86"
        };
        
        for (String valid : validPrefixes) {
            if (prefix.equals(valid)) {
                return true;
            }
        }
        return false;
    }

    /**
     * ✅ EMAIL: Enhanced validation - chỉ cho phép gmail.com và fivec.com
     */
    private void validateEmailFormat(String email) {
        if (email == null || email.trim().isEmpty()) {
            throw new RuntimeException("Email không được để trống!");
        }
        
        String cleanEmail = email.trim().toLowerCase();
        
        // Basic format check
        if (!cleanEmail.contains("@")) {
            throw new RuntimeException("Email phải chứa ký tự @!");
        }
        
        String[] parts = cleanEmail.split("@");
        if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {
            throw new RuntimeException("Email không đúng định dạng!");
        }
        
        String localPart = parts[0];
        String domain = parts[1];
        
        // Check local part format
        if (!localPart.matches("[a-zA-Z0-9._-]+")) {
            throw new RuntimeException("Phần trước @ chỉ được chứa chữ, số, dấu chấm, gạch dưới và gạch ngang!");
        }
        
        if (localPart.length() < 1 || localPart.length() > 50) {
            throw new RuntimeException("Phần trước @ phải có độ dài từ 1-50 ký tự!");
        }
        
        // ✅ FIX: Chỉ cho phép domain cụ thể
        if (!domain.equals("gmail.com") && !domain.equals("fivec.com")) {
            throw new RuntimeException("Email chỉ được sử dụng domain @gmail.com hoặc @fivec.com!");
        }
    }

    /**
     * ✅ UNIQUE: Check ID trùng lặp (chỉ ID là unique theo yêu cầu)
     */
    private void validateUniqueEmployeeId(String userId) {
        try {
            UserAccount existing = userDAO.findById(userId);
            if (existing != null) {
                throw new RuntimeException("Mã nhân viên '" + userId + "' đã tồn tại!");
            }
        } catch (RuntimeException e) {
            throw e; // Re-throw validation errors
        } catch (Exception e) {
            throw new RuntimeException("Lỗi kiểm tra dữ liệu: " + e.getMessage());
        }
    }

    @Override
    public void open() {
    }

    @Override
    public void setForm(UserAccount entity) {
        // Điền dữ liệu từ entity vào form
        if (entity != null) {
            txtIdEmployee.setText(entity.getUser_id());
            txtNameAccount.setText(entity.getUsername());
            txtPassword.setText(entity.getPass());
            txtNameEmployee.setText(entity.getFullName());

            // Xử lý giới tính
            if (entity.getGender() != null) {
                if (entity.getGender() == 1) {
                    chkMale.setSelected(true);  // Nam
                    chkFemale.setSelected(false);
                } else {
                    chkMale.setSelected(false);
                    chkFemale.setSelected(true);  // Nữ
                }
            } else {
                // Reset giới tính nếu null
                groupGioiTinh.clearSelection();
            }

            txtPhoneNumber.setText(entity.getPhone_number());
            txtEmail.setText(entity.getEmail());

            // KHÔNG thay đổi cboStatus và cboRole khi setForm
            // Chỉ hiển thị thông tin trong form, không ảnh hưởng đến filter
            // Hiển thị hình ảnh nếu có
            if (entity.getImage() != null && !entity.getImage().trim().isEmpty()) {
                // Gọi method load ảnh
                loadEmployeeImage(entity.getImage());
            } else {
                lblImage.setText("No Image");
                lblImage.setIcon(null);
            }

            // Hiển thị role name từ DB
            displayRoleInfo(entity.getRole_id());
        }
    }

    /**
     * Hiển thị thông tin role (chỉ để xem, không ảnh hưởng filter)
     */
    private void displayRoleInfo(String roleId) {
        try {
            if (roleId != null) {
                UserRole role = roleDAO.findById(roleId);
                if (role != null) {
                    // Hiển thị trong label hoặc text field chỉ đọc
                    System.out.println("Employee role: " + role.getRole_id() + " - " + role.getName_role());
                    // Có thể thêm label để hiển thị: lblRoleInfo.setText(role.getName_role());
                }
            }
        } catch (Exception e) {
            System.err.println("Lỗi load role info: " + e.getMessage());
        }
    }

    @Override
    public UserAccount getForm() {
        // Lấy dữ liệu từ form tạo thành entity
        UserAccount entity = new UserAccount();
        
        // ✅ Đảm bảo không NULL
        String userId = txtIdEmployee.getText();
        if (userId == null || userId.trim().isEmpty()) {
            throw new RuntimeException("Mã nhân viên không được để trống!");
        }
        entity.setUser_id(userId.trim());
        
        String username = txtNameAccount.getText();
        if (username == null || username.trim().isEmpty()) {
            throw new RuntimeException("Tên đăng nhập không được để trống!");
        }
        entity.setUsername(username.trim());
        
        String password = txtPassword.getText();
        if (password == null || password.trim().isEmpty()) {
            throw new RuntimeException("Mật khẩu không được để trống!");
        }
        entity.setPass(password.trim());
        
        String fullName = txtNameEmployee.getText();
        if (fullName == null || fullName.trim().isEmpty()) {
            throw new RuntimeException("Họ tên không được để trống!");
        }
        entity.setFullName(fullName.trim());
        
        // Xử lý giới tính
        if (chkMale.isSelected()) {
            entity.setGender(1);  // Nam
        } else if (chkFemale.isSelected()) {
            entity.setGender(0);  // Nữ
        } else {
            throw new RuntimeException("Vui lòng chọn giới tính!");
        }
        
        // ✅ Đảm bảo email và phone không NULL
        String email = txtEmail.getText();
        entity.setEmail(email != null ? email.trim() : "");
        
        String phone = txtPhoneNumber.getText();
        entity.setPhone_number(phone != null ? phone.trim() : "");
        
        // Mặc định enabled và role
        entity.setIs_enabled(1); // Mặc định hoạt động
        
        // ✅ Lấy role từ ComboBox thay vì hardcode
        String selectedRole = (String) cboRole.getSelectedItem();
        if (selectedRole != null && !selectedRole.equals("Tất cả")) {
            String roleId = extractRoleId(selectedRole);
            entity.setRole_id(roleId);
        } else {
            entity.setRole_id("R002"); // Mặc định Staff
        }
        
        // Xử lý hình ảnh
        if (lblImage.getIcon() != null) {
            String currentImageText = lblImage.getText();
            if (currentImageText != null && !currentImageText.equals("No Image")
                    && !currentImageText.equals("Error") && !currentImageText.trim().isEmpty()) {
                entity.setImage(currentImageText);
            } else {
                entity.setImage("default.jpg");
            }
        } else {
            entity.setImage("default.jpg");
        }

        return entity;
    }

    @Override
    public void fillToTable() {
        fillToTableWithCache(); // Thay vì filterAndFillTable();
    }

    @Override
    public void edit() {
        editWithCache(); // Thay vì code cũ
    }

    /**
     * Load và hiển thị ảnh nhân viên sử dụng XImage utility
     */
    private void loadEmployeeImage(String imageName) {
        try {
            if (imageName != null && !imageName.trim().isEmpty()) {
                // Đường dẫn ảnh trong resources/icons_and_images/imageEmployee/
                String imagePath = "/icons_and_images/imageEmployee/" + imageName;

                System.out.println("Trying to load image: " + imagePath);

                // Kiểm tra ảnh có tồn tại không
                java.net.URL imageURL = getClass().getResource(imagePath);

                if (imageURL != null) {
                    // Sử dụng XImage utility để set ảnh
                    XImage.setImageToLabel(lblImage, imagePath);
                    lblImage.setText(""); // Xóa text nếu có ảnh

                    System.out.println("✅ Successfully loaded image: " + imageName);
                } else {
                    // Thử load từ thư mục gốc icons_and_images
                    String fallbackPath = "/icons_and_images/" + imageName;
                    System.out.println("Image not found in imageEmployee, trying: " + fallbackPath);

                    java.net.URL fallbackURL = getClass().getResource(fallbackPath);
                    if (fallbackURL != null) {
                        XImage.setImageToLabel(lblImage, fallbackPath);
                        lblImage.setText("");

                        System.out.println("✅ Successfully loaded image from fallback: " + imageName);
                    } else {
                        // Sử dụng placeholder
                        setPlaceholderImage(imageName);
                    }
                }
            } else {
                // Không có tên ảnh - sử dụng ảnh mặc định
                setDefaultImage();
            }
        } catch (Exception e) {
            System.err.println("❌ Lỗi load ảnh: " + e.getMessage());
            setPlaceholderImage(imageName);
        }
    }

    /**
     * Hiển thị ảnh placeholder khi không tìm thấy ảnh
     */
    private void setPlaceholderImage(String imageName) {
        try {
            String placeholderPath = "/icons_and_images/Unknown person.png";
            java.net.URL placeholderURL = getClass().getResource(placeholderPath);

            if (placeholderURL != null) {
                XImage.setImageToLabel(lblImage, placeholderPath);
                lblImage.setText("");
                System.out.println("📷 Using placeholder image for: " + imageName);
            } else {
                // Fallback text nếu không có placeholder
                lblImage.setIcon(null);
                lblImage.setText(imageName != null ? imageName : "No Image");
            }
        } catch (Exception e) {
            lblImage.setIcon(null);
            lblImage.setText("Error");
        }
    }

    /**
     * Hiển thị ảnh mặc định khi không có tên ảnh
     */
    private void setDefaultImage() {
        try {
            String defaultPath = "/icons_and_images/User.png";
            java.net.URL defaultURL = getClass().getResource(defaultPath);

            if (defaultURL != null) {
                XImage.setImageToLabel(lblImage, defaultPath);
                lblImage.setText("");
            } else {
                lblImage.setIcon(null);
                lblImage.setText("No Image");
            }
        } catch (Exception e) {
            lblImage.setIcon(null);
            lblImage.setText("No Image");
        }
    }

    /**
     * Method để test load ảnh (có thể gọi để kiểm tra)
     */
    public void testLoadImage() {
        // Test với một số ảnh có sẵn
        String[] testImages = {"admin01.jpg", "admin02.jpg", "trump.png", "User.png"};

        for (String imageName : testImages) {
            System.out.println("Testing image: " + imageName);
            loadEmployeeImage(imageName);

            try {
                Thread.sleep(2000); // Delay 2 giây để xem ảnh
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * ✅ CREATE: Tạo nhân viên mới với validation đầy đủ
     */
    private boolean isProcessing = false; // Flag để prevent double click

    @Override
    public void create() {
        createWithCache(); // Thay vì code cũ
    }

    /**
     * ✅ UPDATE: Cập nhật nhân viên với preserve important fields
     */
    @Override
    public void update() {
        updateWithCache(); // Thay vì code cũ
    }

    /**
     * ✅ CLEAR: Clear form và prepare cho new entry
     */
    private void clearFormButKeepImage() {
        txtIdEmployee.setText("");
        txtNameAccount.setText("");
        txtPassword.setText("");
        txtNameEmployee.setText("");
        txtPhoneNumber.setText("");
        txtEmail.setText("");

        // Reset gender selection
        groupGioiTinh.clearSelection();

        // Clear table selection
        tableInfo.clearSelection();
        
        // Enable ID field for next create
        txtIdEmployee.setEditable(true);
        
        // Note: Image is preserved intentionally
    }

    /**
     * ✅ LOG: Professional logging for operations
     */
    private void logEmployeeInfo(String operation, UserAccount employee) {
        System.out.println("=== " + operation + " EMPLOYEE ===");
        System.out.println("ID: " + employee.getUser_id());
        System.out.println("Username: " + employee.getUsername());
        System.out.println("Full Name: " + employee.getFullName());
        System.out.println("Email: " + employee.getEmail());
        System.out.println("Phone: " + employee.getPhone_number());
        System.out.println("Gender: " + (employee.getGender() == 1 ? "Nam" : "Nữ"));
        System.out.println("Role: " + employee.getRole_id());
        System.out.println("Time: " + new java.util.Date());
        System.out.println("========================");
    }

    /**
     * ✅ UTILITY: Check if string is blank
     */
    private boolean isBlank(String str) {
        return str == null || str.trim().isEmpty();
    }

    /**
     * ✅ FORM: Check if form is completely empty
     */
    private boolean isFormEmpty() {
        return isBlank(txtIdEmployee.getText()) &&
               isBlank(txtNameAccount.getText()) &&
               isBlank(txtPassword.getText()) &&
               isBlank(txtNameEmployee.getText()) &&
               isBlank(txtPhoneNumber.getText()) &&
               isBlank(txtEmail.getText()) &&
               !chkMale.isSelected() &&
               !chkFemale.isSelected();
    }

    @Override
    public void delete() {
        try {
            // 1. Kiểm tra có dòng nào được chọn không
            int selectedRow = tableInfo.getSelectedRow();
            if (selectedRow < 0) {
                XDialog.alert("Vui lòng chọn một nhân viên để xóa!", "Thông báo");
                return;
            }

            // 2. Lấy thông tin nhân viên được chọn
            String userId = (String) tableInfo.getValueAt(selectedRow, 0);
            String fullName = (String) tableInfo.getValueAt(selectedRow, 3);

            // 3. Xác nhận xóa
            boolean confirmed = XDialog.confirm(
                    "Bạn có chắc chắn muốn xóa nhân viên:\n"
                    + "Mã: " + userId + "\n"
                    + "Tên: " + fullName + "\n\n"
                    + "⚠️ Hành động này không thể hoàn tác!",
                    "Xác nhận xóa"
            );

            if (!confirmed) {
                return; // Người dùng chọn "No" hoặc đóng dialog
            }

            // 4. Kiểm tra nhân viên có tồn tại không
            UserAccount employee = userDAO.findById(userId);
            if (employee == null) {
                XDialog.alert("Không tìm thấy nhân viên với mã: " + userId, "Lỗi");
                return;
            }

            // 5. Kiểm tra ràng buộc nghiệp vụ (tùy chọn)
            // Ví dụ: Không cho xóa Manager cuối cùng
            if ("R001".equals(employee.getRole_id())) {
                List<UserAccount> allManagers = userDAO.findAll().stream()
                        .filter(u -> "R001".equals(u.getRole_id()))
                        .collect(java.util.stream.Collectors.toList());

                if (allManagers.size() <= 1) {
                    XDialog.alert(
                            "Không thể xóa Manager cuối cùng trong hệ thống!",
                            "Lỗi ràng buộc nghiệp vụ"
                    );
                    return;
                }
            }

            // 6. Thực hiện xóa
            userDAO.deleteById(userId);

            // 7. Refresh bảng
            invalidateCache(); // Invalidate cache after deletion
            fillToTableWithCache();

            // 8. Clear form
            clear();

            // 9. Thông báo thành công
            XDialog.alert(
                    "✅ Đã xóa nhân viên thành công!\n"
                    + "Mã: " + userId + "\n"
                    + "Tên: " + fullName,
                    "Xóa thành công"
            );

        } catch (Exception e) {
            // 10. Xử lý lỗi
            XDialog.alert(
                    "❌ Lỗi khi xóa nhân viên: " + e.getMessage(),
                    "Lỗi hệ thống"
            );
            e.printStackTrace();
        }
    }

    @Override
    public void clear() {
        // Method clear() gốc - chỉ clear dữ liệu, không thay đổi editable
        txtIdEmployee.setText("");
        txtNameAccount.setText("");
        txtPassword.setText("");
        txtNameEmployee.setText("");
        txtPhoneNumber.setText("");
        txtEmail.setText("");
        
        // Reset giới tính
        groupGioiTinh.clearSelection();
        
        // Reset hình ảnh
        lblImage.setText("");
        lblImage.setIcon(null);
    }

    /**
     * Method riêng để reset filter về "Tất cả"
     */
    public void resetFilter() {
        cboStatus.setSelectedItem("Tất cả");
        cboRole.setSelectedItem("Tất cả");
        filterAndFillTable();
    }

    @Override
    public void setEditable(boolean editable) {
        // Cho phép/không cho phép chỉnh sửa form
        txtIdEmployee.setEditable(!editable); // ID không được sửa
        txtNameAccount.setEditable(editable);
        txtPassword.setEditable(editable);
        txtNameEmployee.setEditable(editable);
        txtPhoneNumber.setEditable(editable);
        txtEmail.setEditable(editable);

        chkMale.setEnabled(editable);
        chkFemale.setEnabled(editable);
        cboStatus.setEnabled(editable);
        cboRole.setEnabled(editable);
    }

    @Override
    public void checkAll() {
    }

    @Override
    public void uncheckAll() {
    }

    @Override
    public void deleteCheckedItems() {
    }

// =============================================================================
// PERFORMANCE OPTIMIZATION - THÊM VÀO CUỐI FILE (KHÔNG ĐỘNG VÀO CODE CŨ)
// =============================================================================

    // ✅ CACHE: Performance variables
    private List<UserAccount> employeeCache = new ArrayList<>();
    private boolean isCacheValid = false;
    private javax.swing.Timer debounceTimer;

    /**
     * ✅ OPTIMIZED: Initialize performance cache
     */
    private void initializePerformanceCache() {
        // Setup debounce timer for filtering
        debounceTimer = new javax.swing.Timer(300, e -> performFilterAndFill());
        debounceTimer.setRepeats(false);
        
        // Pre-size cache
        employeeCache = new ArrayList<>(100);
    }

    /**
     * ✅ FAST: Enhanced loadRoles với caching
     */
    private void loadRolesWithCache() {
        if (roleMap.isEmpty()) {
            try {
                List<UserRole> roles = roleDAO.findAll();
                for (UserRole role : roles) {
                    roleMap.put(role.getRole_id(), role.getName_role());
                }
            } catch (Exception e) {
                System.err.println("Load roles error: " + e.getMessage());
            }
        }
    }

    /**
     * ✅ FAST: Enhanced fillToTable với smart caching
     */
    private void fillToTableWithCache() {
        javax.swing.SwingUtilities.invokeLater(() -> {
            try {
                // Use cache if valid
                if (!isCacheValid || employeeCache.isEmpty()) {
                    employeeCache = userDAO.findAll();
                    isCacheValid = true;
                    System.out.println("✅ Loaded " + employeeCache.size() + " employees to cache");
                }
                
                // Fast table population
                populateTableFromCache();
                
            } catch (Exception e) {
                System.err.println("Fill table error: " + e.getMessage());
                XDialog.alert("Lỗi load dữ liệu: " + e.getMessage());
            }
        });
    }

    /**
     * ✅ FAST: Populate table from cache
     */
    private void populateTableFromCache() {
        DefaultTableModel model = (DefaultTableModel) tableInfo.getModel();
        model.setRowCount(0);

        String selectedStatus = (String) cboStatus.getSelectedItem();
        String selectedRole = (String) cboRole.getSelectedItem();

        for (UserAccount emp : employeeCache) {
            if (matchesFilters(emp, selectedStatus, selectedRole)) {
                model.addRow(createRowData(emp));
            }
        }
    }

    /**
     * ✅ FAST: Filter matching logic
     */
    private boolean matchesFilters(UserAccount emp, String status, String role) {
        // Status filter
        if (status != null && !status.equals("Tất cả")) {
            if (status.equals("Hoạt động") && (emp.getIs_enabled() == null || emp.getIs_enabled() != 1)) {
                return false;
            }
            if (status.equals("Không hoạt động") && (emp.getIs_enabled() == null || emp.getIs_enabled() != 0)) {
                return false;
            }
        }

        // Role filter
        if (role != null && !role.equals("Tất cả")) {
            String roleId = role.contains(" - ") ? role.split(" - ")[0] : role;
            if (!roleId.equals(emp.getRole_id())) {
                return false;
            }
        }

        return true;
    }

    /**
     * ✅ FAST: Create row data
     */
    private Object[] createRowData(UserAccount emp) {
        return new Object[]{
            emp.getUser_id(),
            emp.getUsername(),
            emp.getPass(),
            emp.getFullName(),
            emp.getGender() != null ? (emp.getGender() == 1 ? "Nam" : "Nữ") : "N/A",
            emp.getPhone_number(),
            emp.getEmail(),
            emp.getIs_enabled() != null ? (emp.getIs_enabled() == 1 ? "Hoạt động" : "Không hoạt động") : "N/A",
            roleMap.getOrDefault(emp.getRole_id(), "N/A"),
            formatDateFast(emp.getCreated_date())
        };
    }

    /**
     * ✅ FAST: Date formatting với reusable formatter
     */
    private String formatDateFast(java.util.Date date) {
        if (date == null) return "N/A";
        
        // Simple and fast formatting
        return new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm").format(date);
    }

    /**
     * ✅ OPTIMIZED: Enhanced edit với cache lookup
     */
    private void editWithCache() {
        int selectedRow = tableInfo.getSelectedRow();
        if (selectedRow < 0) {
            XDialog.alert("Vui lòng chọn một dòng để chỉnh sửa!");
            return;
        }

        String userId = (String) tableInfo.getValueAt(selectedRow, 0);

        // Try cache first (much faster)
        UserAccount entity = null;
        for (UserAccount emp : employeeCache) {
            if (userId.equals(emp.getUser_id())) {
                entity = emp;
                break;
            }
        }

        // Fallback to database if not in cache
        if (entity == null) {
            entity = userDAO.findById(userId);
        }

        if (entity != null) {
            setForm(entity);
            txtIdEmployee.setEditable(false);
            setAllFieldsEditable(true);
        } else {
            XDialog.alert("Không tìm thấy thông tin nhân viên!");
        }
    }

    /**
     * ✅ FAST: Enhanced image loading
     */
    private void loadImageFast(String imageName) {
        if (imageName == null || imageName.trim().isEmpty()) {
            setDefaultImageFast();
            return;
        }

        // Try multiple paths quickly
        String[] paths = {
            "/icons_and_images/imageEmployee/" + imageName,
            "/icons_and_images/" + imageName
        };

        for (String path : paths) {
            try {
                if (getClass().getResource(path) != null) {
                    XImage.setImageToLabel(lblImage, path);
                    lblImage.setText("");
                    return;
                }
            } catch (Exception e) {
                // Continue to next path
            }
        }

        // Fallback
        setPlaceholderImageFast(imageName);
    }

    /**
     * ✅ FAST: Default and placeholder images
     */
    private void setDefaultImageFast() {
        try {
            XImage.setImageToLabel(lblImage, "/icons_and_images/User.png");
            lblImage.setText("");
        } catch (Exception e) {
            lblImage.setIcon(null);
            lblImage.setText("No Image");
        }
    }

    private void setPlaceholderImageFast(String imageName) {
        try {
            XImage.setImageToLabel(lblImage, "/icons_and_images/Unknown person.png");
            lblImage.setText("");
        } catch (Exception e) {
            lblImage.setIcon(null);
            lblImage.setText(imageName);
        }
    }

    /**
     * ✅ CACHE: Invalidate cache after CRUD operations
     */
    private void invalidateCache() {
        isCacheValid = false;
        employeeCache.clear();
    }

    /**
     * ✅ OPTIMIZED: Enhanced create với cache management
     */
    private void createWithCache() {
        if (isProcessing) return;
        isProcessing = true;

        try {
            if (isFormEmpty()) {
                XDialog.alert("⚠️ Vui lòng nhập thông tin nhân viên!");
                return;
            }

            validateEmployee();
            UserAccount newEmployee = getForm();
            validateUniqueEmployeeId(newEmployee.getUser_id());
            validateBusinessRules(newEmployee);

            // Create in database
            userDAO.create(newEmployee);

            // Invalidate cache and refresh
            invalidateCache();
            fillToTableWithCache();
            clearForNewEntry();

            XDialog.alert("✅ Tạo nhân viên thành công!\nMã: " + newEmployee.getUser_id());

        } catch (RuntimeException e) {
            XDialog.alert("❌ " + e.getMessage());
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi hệ thống: " + e.getMessage());
            e.printStackTrace();
        } finally {
            isProcessing = false;
        }
    }

    /**
     * ✅ OPTIMIZED: Enhanced update với cache management
     */
    private void updateWithCache() {
        if (isProcessing) return;
        isProcessing = true;

        try {
            validateEmployee();
            UserAccount updatedEmployee = getForm();

            UserAccount existingEmployee = userDAO.findById(updatedEmployee.getUser_id());
            if (existingEmployee == null) {
                XDialog.alert("Không tìm thấy nhân viên với mã: " + updatedEmployee.getUser_id());
                return;
            }

            validateBusinessRules(updatedEmployee);

            // Preserve important fields
            updatedEmployee.setCreated_date(existingEmployee.getCreated_date());
            if (updatedEmployee.getImage() == null || 
                updatedEmployee.getImage().equals("default.jpg") ||
                updatedEmployee.getImage().trim().isEmpty()) {
                updatedEmployee.setImage(existingEmployee.getImage());
            }

            // Update in database
            userDAO.update(updatedEmployee);

            // Invalidate cache and refresh
            invalidateCache();
            fillToTableWithCache();
            clearFormButKeepImage();

            XDialog.alert("✅ Cập nhật nhân viên thành công!");

        } catch (RuntimeException e) {
            XDialog.alert("❌ " + e.getMessage());
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi khi cập nhật: " + e.getMessage());
            e.printStackTrace();
        } finally {
            isProcessing = false;
        }
    }

    /**
     * ✅ DEBOUNCED: Filter với debouncing để tránh lag
     */
    private void performFilterAndFill() {
        if (debounceTimer != null && debounceTimer.isRunning()) {
            debounceTimer.restart();
        } else {
            populateTableFromCache();
        }
    }

    /**
     * ✅ INITIALIZE: Call this in constructor to setup performance
     */
    private void setupPerformanceOptimizations() {
        initializePerformanceCache();
        loadRolesWithCache();
        
        // Setup fast filtering
        cboStatus.addActionListener(e -> debounceTimer.restart());
        cboRole.addActionListener(e -> debounceTimer.restart());
    }

    /**
     * ✅ PRODUCTION: Load image instantly (thay thế testLoadImage)
     */
    private void preloadDefaultImages() {
        // Preload các ảnh mặc định để performance tốt hơn
        javax.swing.SwingUtilities.invokeLater(() -> {
            setDefaultImageFast();
        });
    }
}