-- Script t·∫°o database qu·∫£n l√Ω qu√°n m√¨ cay (ƒê√£ s·ª≠a l·ªói)
-- B∆∞·ªõc 1: X√≥a c√°c b·∫£ng c≈© (n·∫øu c√≥)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BILL_DETAIL CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BILL CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE PAYMENT_HISTORY CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE PRODUCT CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CATE CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE TABLE_FOR_CUSTOMER CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USER_ACCOUNT CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USER_ROLE CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE PAYMENT_METHOD CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- X√≥a c√°c index c≈©
BEGIN
    EXECUTE IMMEDIATE 'DROP INDEX IDX_USER_USERNAME';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP INDEX IDX_CUSTOMER_PHONE';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- X√≥a sequences c≈©
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_PAYMENT_HISTORY';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_BILL';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_BILL_DETAIL';
    EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- B∆∞·ªõc 2: T·∫°o c√°c b·∫£ng m·ªõi
CREATE TABLE USER_ROLE (
    role_id NVARCHAR2(5) PRIMARY KEY,
    name_role NVARCHAR2(15) NOT NULL
);

CREATE TABLE USER_ACCOUNT (
    user_id NVARCHAR2(20) PRIMARY KEY,
    username NVARCHAR2(20) NOT NULL UNIQUE,
    pass NVARCHAR2(50) NOT NULL,
    fullName NVARCHAR2(50) NOT NULL,
    email NVARCHAR2(100) UNIQUE,
    phone_number NVARCHAR2(11) UNIQUE,
    image NVARCHAR2(255),
    is_enabled NUMBER(1) DEFAULT 1,
    created_date DATE DEFAULT SYSDATE,
    role_id NVARCHAR2(5) NOT NULL,
    CONSTRAINT FK_User_Role FOREIGN KEY (role_id) REFERENCES USER_ROLE(role_id)
);

CREATE TABLE CUSTOMER (
    phone_number NVARCHAR2(11) PRIMARY KEY,
    customer_name NVARCHAR2(50) NOT NULL,
    email NVARCHAR2(100),
    address NVARCHAR2(200),
    points NUMBER(10) DEFAULT 0,
    created_date DATE DEFAULT SYSDATE,
    is_active NUMBER(1) DEFAULT 1
);

CREATE TABLE CATE (
    category_id NVARCHAR2(5) PRIMARY KEY,
    category_name NVARCHAR2(50) NOT NULL UNIQUE,
    is_available NUMBER(1) DEFAULT 1
);

CREATE TABLE PRODUCT (
    product_id NVARCHAR2(10) PRIMARY KEY,
    product_name NVARCHAR2(100) NOT NULL,
    category_id NVARCHAR2(5) NOT NULL,
    price NUMBER(9,0) NOT NULL,
    description NVARCHAR2(500),
    image NVARCHAR2(255),
    is_available NUMBER(1) DEFAULT 1,
    CONSTRAINT FK_Product_Category FOREIGN KEY (category_id) REFERENCES CATE(category_id)
);

CREATE TABLE TABLE_FOR_CUSTOMER (
    table_number NUMBER(3) PRIMARY KEY,
    capacity NUMBER(2) NOT NULL,
    status NVARCHAR2(20) DEFAULT N'Tr·ªëng',
    is_available NUMBER(1) DEFAULT 1
);

CREATE TABLE PAYMENT_METHOD (
    payment_method_id NUMBER(1) PRIMARY KEY,
    method_name NVARCHAR2(50) NOT NULL,
    is_available NUMBER(1) DEFAULT 1
);

-- T·∫°o sequences cho IDENTITY columns
CREATE SEQUENCE SEQ_PAYMENT_HISTORY START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_BILL START WITH 10000 INCREMENT BY 1;
CREATE SEQUENCE SEQ_BILL_DETAIL START WITH 1000 INCREMENT BY 1;

CREATE TABLE PAYMENT_HISTORY (
    payment_history_id NUMBER PRIMARY KEY,
    payment_method_id NUMBER(1) NOT NULL,
    payment_date DATE DEFAULT SYSDATE,
    total_amount NUMBER(9,0),
    status NVARCHAR2(30) DEFAULT N'Th√†nh c√¥ng',
    note NVARCHAR2(255),
    CONSTRAINT FK_PaymentHistory_PaymentMethod FOREIGN KEY (payment_method_id) REFERENCES PAYMENT_METHOD(payment_method_id)
);

CREATE TABLE BILL (
    bill_id NUMBER PRIMARY KEY,
    user_id NVARCHAR2(20) NOT NULL,
    phone_number NVARCHAR2(11),
    payment_history_id NUMBER,
    table_number NUMBER(3),
    total_amount NUMBER(9,0) DEFAULT 0,
    checkin DATE DEFAULT SYSDATE,
    checkout DATE,
    status NVARCHAR2(50) DEFAULT N'ƒêang ph·ª•c v·ª•',
    CONSTRAINT FK_Bill_User FOREIGN KEY (user_id) REFERENCES USER_ACCOUNT(user_id),
    CONSTRAINT FK_Bill_Customer FOREIGN KEY (phone_number) REFERENCES CUSTOMER(phone_number),
    CONSTRAINT FK_Bill_PaymentHistory FOREIGN KEY (payment_history_id) REFERENCES PAYMENT_HISTORY(payment_history_id),
    CONSTRAINT FK_Bill_Table FOREIGN KEY (table_number) REFERENCES TABLE_FOR_CUSTOMER(table_number),
    CONSTRAINT CHK_Bill_Amount CHECK (total_amount >= 0)
);

CREATE TABLE BILL_DETAIL (
    bill_detail_id NUMBER PRIMARY KEY,
    bill_id NUMBER NOT NULL,
    product_id NVARCHAR2(10) NOT NULL,
    amount NUMBER(2) NOT NULL,
    price NUMBER(9,0) NOT NULL,
    discount NUMBER(3,2) DEFAULT 0,
    CONSTRAINT FK_BillDetail_Bill FOREIGN KEY (bill_id) REFERENCES BILL(bill_id),
    CONSTRAINT FK_BillDetail_Product FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id),
    CONSTRAINT CHK_BillDetail_Amount CHECK (amount > 0),
    CONSTRAINT CHK_BillDetail_Price CHECK (price > 0)
);

-- T·∫°o triggers ƒë·ªÉ t·ª± ƒë·ªông t·∫°o ID
CREATE OR REPLACE TRIGGER TRG_PAYMENT_HISTORY_ID
BEFORE INSERT ON PAYMENT_HISTORY
FOR EACH ROW
BEGIN
    SELECT SEQ_PAYMENT_HISTORY.NEXTVAL INTO :NEW.payment_history_id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_BILL_ID
BEFORE INSERT ON BILL
FOR EACH ROW
BEGIN
    SELECT SEQ_BILL.NEXTVAL INTO :NEW.bill_id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_BILL_DETAIL_ID
BEFORE INSERT ON BILL_DETAIL
FOR EACH ROW
BEGIN
    SELECT SEQ_BILL_DETAIL.NEXTVAL INTO :NEW.bill_detail_id FROM DUAL;
END;
/

-- B∆∞·ªõc 3: T·∫°o c√°c index t·ªëi ∆∞u
CREATE INDEX IDX_USER_USERNAME ON USER_ACCOUNT(username);
CREATE INDEX IDX_USER_ROLE ON USER_ACCOUNT(role_id);
CREATE INDEX IDX_CUSTOMER_PHONE ON CUSTOMER(phone_number);
CREATE INDEX IDX_PRODUCT_CATEGORY ON PRODUCT(category_id);
CREATE INDEX IDX_BILL_CUSTOMER ON BILL(phone_number);
CREATE INDEX IDX_BILL_USER ON BILL(user_id);
CREATE INDEX IDX_BILL_DATE ON BILL(checkin);
CREATE INDEX IDX_BILLDETAIL_BILL ON BILL_DETAIL(bill_id);
CREATE INDEX IDX_BILLDETAIL_PRODUCT ON BILL_DETAIL(product_id);

-- Commit
COMMIT;

-- Th√¥ng b√°o ho√†n th√†nh
DBMS_OUTPUT.PUT_LINE('‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng t·∫•t c·∫£ 10 b·∫£ng!');
DBMS_OUTPUT.PUT_LINE('‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng 9 index!');
DBMS_OUTPUT.PUT_LINE('‚úÖ Database s·∫µn s√†ng s·ª≠ d·ª•ng!');
DBMS_OUTPUT.PUT_LINE('üéâ Ready for production!'); 